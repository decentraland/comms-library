"\"use strict\";\n(() => {\n  var __create = Object.create;\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __getProtoOf = Object.getPrototypeOf;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n    mod\n  ));\n\n  // ../node_modules/fp-future/index.js\n  var require_fp_future = __commonJS({\n    \"../node_modules/fp-future/index.js\"(exports) {\n      \"use strict\";\n      Object.defineProperty(exports, \"__esModule\", { value: true });\n      function future2() {\n        let resolver;\n        let rejecter;\n        const promise = new Promise((ok, err) => {\n          resolver = (x) => {\n            ok(x);\n            promise.isPending = false;\n          };\n          rejecter = (x) => {\n            err(x);\n            promise.isPending = false;\n          };\n        }).catch((e) => Promise.reject(e));\n        promise.resolve = resolver;\n        promise.reject = rejecter;\n        if (!(\"finally\" in promise)) {\n          promise.finally = (fn) => {\n            promise.then(fn);\n            promise.catch(fn);\n          };\n        }\n        promise.isPending = true;\n        return promise;\n      }\n      exports.future = future2;\n      exports.default = future2;\n    }\n  });\n\n  // RingBuffer.ts\n  var import_fp_future = __toESM(require_fp_future());\n  var RingBuffer = class {\n    constructor(size, ArrayTypeConstructor) {\n      this.size = size;\n      this.ArrayTypeConstructor = ArrayTypeConstructor;\n      this.writePointer = 0;\n      this.readPointer = 0;\n      this.buffer = new this.ArrayTypeConstructor(size);\n    }\n    readAvailableCount() {\n      return this.writePointer - this.readPointer;\n    }\n    getWritePointer() {\n      return this.writePointer;\n    }\n    getReadPointer() {\n      return this.readPointer;\n    }\n    write(array, length) {\n      this.writeAt(array, this.writePointer, length);\n    }\n    read(readCount) {\n      const result = this.peek(this.readPointer, readCount);\n      this.readPointer += result.length;\n      return result;\n    }\n    peek(startPointer, readCount) {\n      const start = startPointer ? startPointer : this.readPointer;\n      const maxCountToRead = this.writePointer - this.readPointer;\n      const count = readCount ? Math.min(readCount, maxCountToRead) : maxCountToRead;\n      const readPosition = start % this.buffer.length;\n      const endIndex = readPosition + count;\n      let result;\n      if (endIndex > this.buffer.length) {\n        result = new this.ArrayTypeConstructor(count);\n        result.set(this.buffer.slice(readPosition, this.buffer.length));\n        result.set(this.buffer.slice(0, endIndex - this.buffer.length), this.buffer.length - readPosition);\n      } else {\n        result = this.buffer.slice(readPosition, endIndex);\n      }\n      return result;\n    }\n    writeAt(array, startPointer, length) {\n      const len = length || array.length;\n      let toWrite = array;\n      if (len > this.buffer.length) {\n        toWrite = array.slice(array.length - this.buffer.length, array.length);\n      }\n      const writePosition = startPointer % this.buffer.length;\n      const endIndex = writePosition + len;\n      if (endIndex > this.buffer.length) {\n        const partitionIndex = this.buffer.length - writePosition;\n        this.buffer.set(toWrite.slice(0, partitionIndex), writePosition);\n        this.buffer.set(toWrite.slice(partitionIndex, len), 0);\n      } else {\n        this.buffer.set(toWrite.slice(0, len), writePosition);\n      }\n      const endPointer = startPointer + len;\n      if (endPointer > this.writePointer) {\n        this.writePointer = endPointer;\n      }\n      this.updateReadPointerToMinReadPosition();\n    }\n    isFull() {\n      return this.readAvailableCount() >= this.size;\n    }\n    updateReadPointerToMinReadPosition() {\n      const minReadPointer = this.writePointer - this.buffer.length;\n      if (this.readPointer < minReadPointer) {\n        this.readPointer = minReadPointer;\n      }\n    }\n  };\n\n  // ../src/lib/voice/constants.ts\n  var OPUS_FRAME_SIZE_MS = 40;\n  var VOICE_CHAT_SAMPLE_RATE = 24e3;\n  var OPUS_SAMPLES_PER_FRAME = VOICE_CHAT_SAMPLE_RATE * OPUS_FRAME_SIZE_MS / 1e3;\n  var OUTPUT_NODE_BUFFER_SIZE = 2048;\n  var OUTPUT_NODE_BUFFER_DURATION = OUTPUT_NODE_BUFFER_SIZE * 1e3 / VOICE_CHAT_SAMPLE_RATE;\n\n  // audioWorkletProcessors.ts\n  var InputProcessor = class extends AudioWorkletProcessor {\n    constructor(...args) {\n      super(...args);\n      this.status = 2 /* PAUSED */;\n      this.inputSamplesCount = 0;\n      this.lastProcess = 0;\n      this.port.onmessage = (e) => {\n        if (e.data.topic === \"PAUSE\" /* PAUSE */) {\n          this.status = 1 /* PAUSE_REQUESTED */;\n        }\n        if (e.data.topic === \"RESUME\" /* RESUME */) {\n          this.status = 0 /* RECORDING */;\n          this.notify(\"ON_RECORDING\" /* ON_RECORDING */);\n        }\n        if (e.data.topic === \"CHECK_STATUS\" /* CHECK_STATUS */) {\n          if (this.status === 0 /* RECORDING */ || this.status === 1 /* PAUSE_REQUESTED */) {\n            if (this.isTimeout()) {\n              this.status = 2 /* PAUSED */;\n              this.notify(\"TIMEOUT\" /* TIMEOUT */);\n              this.notify(\"ON_PAUSED\" /* ON_PAUSED */);\n            }\n          }\n        }\n      };\n    }\n    isTimeout() {\n      return Date.now() - this.lastProcess > 1e3;\n    }\n    process(inputs, _outputs, _parameters) {\n      this.lastProcess = Date.now();\n      if (this.status === 2 /* PAUSED */)\n        return true;\n      let inputData = inputs?.[0]?.[0] ?? new Float32Array();\n      if (this.status === 1 /* PAUSE_REQUESTED */) {\n        const samplesToUse = Math.floor(inputData.length / OPUS_SAMPLES_PER_FRAME) * OPUS_SAMPLES_PER_FRAME + OPUS_SAMPLES_PER_FRAME - this.inputSamplesCount % OPUS_SAMPLES_PER_FRAME;\n        if (samplesToUse <= inputData.length) {\n          inputData = inputData.slice(0, samplesToUse);\n          this.status = 2 /* PAUSED */;\n          this.notify(\"ON_PAUSED\" /* ON_PAUSED */);\n        }\n      }\n      this.inputSamplesCount += inputData.length;\n      this.sendDataToEncode(inputData);\n      return true;\n    }\n    notify(notification) {\n      this.port.postMessage({ topic: notification });\n    }\n    sendDataToEncode(data) {\n      this.port.postMessage({ topic: \"ENCODE\" /* ENCODE */, samples: data }, [data.buffer]);\n    }\n  };\n  var OutputProcessor = class extends AudioWorkletProcessor {\n    constructor(options) {\n      super(options);\n      this.playing = false;\n      this.bufferLength = options?.processorOptions.channelBufferSize ?? 2;\n      this.sampleRate = options?.processorOptions.sampleRate ?? VOICE_CHAT_SAMPLE_RATE;\n      this.buffer = new RingBuffer(Math.floor(this.bufferLength * this.sampleRate), Float32Array);\n      this.readStartSamplesCount = (options?.processorOptions.readStartLength ?? 0.2) * this.sampleRate;\n      this.port.onmessage = (e) => {\n        if (e.data.topic === \"WRITE_SAMPLES\" /* WRITE_SAMPLES */) {\n          this.buffer.write(e.data.samples);\n        }\n      };\n    }\n    process(inputs, outputs, _parameters) {\n      const data = outputs[0][0];\n      data.fill(0);\n      const wasPlaying = this.playing;\n      const minReadCount = wasPlaying ? data.length - 1 : this.readStartSamplesCount;\n      if (this.buffer.readAvailableCount() > minReadCount) {\n        data.set(this.buffer.read(data.length));\n        if (!wasPlaying) {\n          this.changePlayingStatus(true);\n        }\n      } else {\n        if (wasPlaying) {\n          this.changePlayingStatus(false);\n        }\n      }\n      return true;\n    }\n    changePlayingStatus(playing) {\n      this.playing = playing;\n      this.port.postMessage({ topic: \"STREAM_PLAYING\" /* STREAM_PLAYING */, playing });\n    }\n  };\n  registerProcessor(\"inputProcessor\", InputProcessor);\n  registerProcessor(\"outputProcessor\", OutputProcessor);\n})();\n//# sourceMappingURL=data:application/json;base64,\n"