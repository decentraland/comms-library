"\"use strict\";\n(() => {\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __require = /* @__PURE__ */ ((x) => typeof require !== \"undefined\" ? require : typeof Proxy !== \"undefined\" ? new Proxy(x, {\n    get: (a, b) => (typeof require !== \"undefined\" ? require : a)[b]\n  }) : x)(function(x) {\n    if (typeof require !== \"undefined\")\n      return require.apply(this, arguments);\n    throw new Error('Dynamic require of \"' + x + '\" is not supported');\n  });\n  var __commonJS = (cb, mod) => function __require2() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n\n  // libopus.wasm.js\n  var require_libopus_wasm = __commonJS({\n    \"libopus.wasm.js\"(exports, module) {\n      \"use strict\";\n      var workerDataURI = `data:application/wasm;base64,`;\n      var Module = typeof Module !== \"undefined\" ? Module : {};\n      Module[\"onRuntimeInitialized\"] = function() {\n        if (Module.onload)\n          Module.onload();\n        Module.loaded = true;\n      };\n      Module[\"locateFile\"] = function(url) {\n        if (url == \"libopus.wasm\" && typeof LIBOPUS_WASM_URL != \"undefined\")\n          return LIBOPUS_WASM_URL;\n        else\n          return url;\n      };\n      var moduleOverrides = {};\n      var key;\n      for (key in Module) {\n        if (Module.hasOwnProperty(key)) {\n          moduleOverrides[key] = Module[key];\n        }\n      }\n      Module[\"arguments\"] = [];\n      Module[\"thisProgram\"] = \"./this.program\";\n      Module[\"quit\"] = function(status, toThrow) {\n        throw toThrow;\n      };\n      Module[\"preRun\"] = [];\n      Module[\"postRun\"] = [];\n      var ENVIRONMENT_IS_WEB = false;\n      var ENVIRONMENT_IS_WORKER = false;\n      var ENVIRONMENT_IS_NODE = false;\n      var ENVIRONMENT_IS_SHELL = false;\n      ENVIRONMENT_IS_WEB = typeof window === \"object\";\n      ENVIRONMENT_IS_WORKER = typeof importScripts === \"function\";\n      ENVIRONMENT_IS_NODE = typeof process === \"object\" && typeof __require === \"function\" && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;\n      ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\n      var scriptDirectory = \"\";\n      if (ENVIRONMENT_IS_NODE) {\n        scriptDirectory = __dirname + \"/\";\n        Module[\"read\"] = function shell_read(filename, binary) {\n          throw new Error(\"Read doesnt work\");\n        };\n        Module[\"readBinary\"] = function readBinary(filename) {\n          var ret = Module[\"read\"](filename, true);\n          if (!ret.buffer) {\n            ret = new Uint8Array(ret);\n          }\n          assert(ret.buffer);\n          return ret;\n        };\n        if (process[\"argv\"].length > 1) {\n          Module[\"thisProgram\"] = process[\"argv\"][1].replace(/\\\\/g, \"/\");\n        }\n        Module[\"arguments\"] = process[\"argv\"].slice(2);\n        process[\"on\"](\"uncaughtException\", function(ex) {\n          if (!(ex instanceof ExitStatus)) {\n            throw ex;\n          }\n        });\n        process[\"on\"](\"unhandledRejection\", function(reason, p) {\n          process[\"exit\"](1);\n        });\n        Module[\"quit\"] = function(status) {\n          process[\"exit\"](status);\n        };\n        Module[\"inspect\"] = function() {\n          return \"[Emscripten Module object]\";\n        };\n      } else if (ENVIRONMENT_IS_SHELL) {\n        if (typeof read != \"undefined\") {\n          Module[\"read\"] = function shell_read(f) {\n            return read(f);\n          };\n        }\n        Module[\"readBinary\"] = function readBinary(f) {\n          var data;\n          if (typeof readbuffer === \"function\") {\n            return new Uint8Array(readbuffer(f));\n          }\n          data = read(f, \"binary\");\n          assert(typeof data === \"object\");\n          return data;\n        };\n        if (typeof scriptArgs != \"undefined\") {\n          Module[\"arguments\"] = scriptArgs;\n        } else if (typeof arguments != \"undefined\") {\n          Module[\"arguments\"] = arguments;\n        }\n        if (typeof quit === \"function\") {\n          Module[\"quit\"] = function(status) {\n            quit(status);\n          };\n        }\n      } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n        if (ENVIRONMENT_IS_WEB) {\n          if (document.currentScript) {\n            scriptDirectory = document.currentScript.src;\n          }\n        } else {\n          scriptDirectory = self.location.href;\n        }\n        if (scriptDirectory.indexOf(\"blob:\") !== 0) {\n          scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf(\"/\") + 1);\n        } else {\n          scriptDirectory = \"\";\n        }\n        Module[\"read\"] = function shell_read(url) {\n          var xhr = new XMLHttpRequest();\n          xhr.open(\"GET\", url, false);\n          xhr.send(null);\n          return xhr.responseText;\n        };\n        if (ENVIRONMENT_IS_WORKER) {\n          Module[\"readBinary\"] = function readBinary(url) {\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"GET\", url, false);\n            xhr.responseType = \"arraybuffer\";\n            xhr.send(null);\n            return new Uint8Array(xhr.response);\n          };\n        }\n        Module[\"readAsync\"] = function readAsync(url, onload, onerror) {\n          var xhr = new XMLHttpRequest();\n          xhr.open(\"GET\", url, true);\n          xhr.responseType = \"arraybuffer\";\n          xhr.onload = function xhr_onload() {\n            if (xhr.status == 200 || xhr.status == 0 && xhr.response) {\n              onload(xhr.response);\n              return;\n            }\n            onerror();\n          };\n          xhr.onerror = onerror;\n          xhr.send(null);\n        };\n        Module[\"setWindowTitle\"] = function(title) {\n          document.title = title;\n        };\n      } else {\n      }\n      var nodeFS;\n      var nodePath;\n      var out = Module[\"print\"] || (typeof console !== \"undefined\" ? console.log.bind(console) : typeof print !== \"undefined\" ? print : null);\n      var err = Module[\"printErr\"] || (typeof printErr !== \"undefined\" ? printErr : typeof console !== \"undefined\" && console.warn.bind(console) || out);\n      for (key in moduleOverrides) {\n        if (moduleOverrides.hasOwnProperty(key)) {\n          Module[key] = moduleOverrides[key];\n        }\n      }\n      moduleOverrides = void 0;\n      var STACK_ALIGN = 16;\n      function staticAlloc(size) {\n        var ret = STATICTOP;\n        STATICTOP = STATICTOP + size + 15 & -16;\n        return ret;\n      }\n      function alignMemory(size, factor) {\n        if (!factor)\n          factor = STACK_ALIGN;\n        var ret = size = Math.ceil(size / factor) * factor;\n        return ret;\n      }\n      var asm2wasmImports = {\n        \"f64-rem\": function(x, y) {\n          return x % y;\n        },\n        debugger: function() {\n          debugger;\n        }\n      };\n      var functionPointers = new Array(0);\n      var GLOBAL_BASE = 1024;\n      var ABORT = false;\n      var EXITSTATUS = 0;\n      function assert(condition, text) {\n        if (!condition) {\n          abort(\"Assertion failed: \" + text);\n        }\n      }\n      var JSfuncs = {\n        stackSave: function() {\n          stackSave();\n        },\n        stackRestore: function() {\n          stackRestore();\n        },\n        arrayToC: function(arr) {\n          var ret = stackAlloc(arr.length);\n          writeArrayToMemory(arr, ret);\n          return ret;\n        },\n        stringToC: function(str) {\n          var ret = 0;\n          if (str !== null && str !== void 0 && str !== 0) {\n            var len = (str.length << 2) + 1;\n            ret = stackAlloc(len);\n            stringToUTF8(str, ret, len);\n          }\n          return ret;\n        }\n      };\n      var toC = { string: JSfuncs[\"stringToC\"], array: JSfuncs[\"arrayToC\"] };\n      function Pointer_stringify(ptr, length) {\n        if (length === 0 || !ptr)\n          return \"\";\n        var hasUtf = 0;\n        var t;\n        var i = 0;\n        while (1) {\n          t = HEAPU8[ptr + i >> 0];\n          hasUtf |= t;\n          if (t == 0 && !length)\n            break;\n          i++;\n          if (length && i == length)\n            break;\n        }\n        if (!length)\n          length = i;\n        var ret = \"\";\n        if (hasUtf < 128) {\n          var MAX_CHUNK = 1024;\n          var curr;\n          while (length > 0) {\n            curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));\n            ret = ret ? ret + curr : curr;\n            ptr += MAX_CHUNK;\n            length -= MAX_CHUNK;\n          }\n          return ret;\n        }\n        return UTF8ToString(ptr);\n      }\n      var UTF8Decoder = typeof TextDecoder !== \"undefined\" ? new TextDecoder(\"utf8\") : void 0;\n      function UTF8ArrayToString(u8Array, idx) {\n        var endPtr = idx;\n        while (u8Array[endPtr])\n          ++endPtr;\n        if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {\n          return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));\n        } else {\n          var u0, u1, u2, u3, u4, u5;\n          var str = \"\";\n          while (1) {\n            u0 = u8Array[idx++];\n            if (!u0)\n              return str;\n            if (!(u0 & 128)) {\n              str += String.fromCharCode(u0);\n              continue;\n            }\n            u1 = u8Array[idx++] & 63;\n            if ((u0 & 224) == 192) {\n              str += String.fromCharCode((u0 & 31) << 6 | u1);\n              continue;\n            }\n            u2 = u8Array[idx++] & 63;\n            if ((u0 & 240) == 224) {\n              u0 = (u0 & 15) << 12 | u1 << 6 | u2;\n            } else {\n              u3 = u8Array[idx++] & 63;\n              if ((u0 & 248) == 240) {\n                u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u3;\n              } else {\n                u4 = u8Array[idx++] & 63;\n                if ((u0 & 252) == 248) {\n                  u0 = (u0 & 3) << 24 | u1 << 18 | u2 << 12 | u3 << 6 | u4;\n                } else {\n                  u5 = u8Array[idx++] & 63;\n                  u0 = (u0 & 1) << 30 | u1 << 24 | u2 << 18 | u3 << 12 | u4 << 6 | u5;\n                }\n              }\n            }\n            if (u0 < 65536) {\n              str += String.fromCharCode(u0);\n            } else {\n              var ch = u0 - 65536;\n              str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n            }\n          }\n        }\n      }\n      function UTF8ToString(ptr) {\n        return UTF8ArrayToString(HEAPU8, ptr);\n      }\n      function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {\n        if (!(maxBytesToWrite > 0))\n          return 0;\n        var startIdx = outIdx;\n        var endIdx = outIdx + maxBytesToWrite - 1;\n        for (var i = 0; i < str.length; ++i) {\n          var u = str.charCodeAt(i);\n          if (u >= 55296 && u <= 57343) {\n            var u1 = str.charCodeAt(++i);\n            u = 65536 + ((u & 1023) << 10) | u1 & 1023;\n          }\n          if (u <= 127) {\n            if (outIdx >= endIdx)\n              break;\n            outU8Array[outIdx++] = u;\n          } else if (u <= 2047) {\n            if (outIdx + 1 >= endIdx)\n              break;\n            outU8Array[outIdx++] = 192 | u >> 6;\n            outU8Array[outIdx++] = 128 | u & 63;\n          } else if (u <= 65535) {\n            if (outIdx + 2 >= endIdx)\n              break;\n            outU8Array[outIdx++] = 224 | u >> 12;\n            outU8Array[outIdx++] = 128 | u >> 6 & 63;\n            outU8Array[outIdx++] = 128 | u & 63;\n          } else if (u <= 2097151) {\n            if (outIdx + 3 >= endIdx)\n              break;\n            outU8Array[outIdx++] = 240 | u >> 18;\n            outU8Array[outIdx++] = 128 | u >> 12 & 63;\n            outU8Array[outIdx++] = 128 | u >> 6 & 63;\n            outU8Array[outIdx++] = 128 | u & 63;\n          } else if (u <= 67108863) {\n            if (outIdx + 4 >= endIdx)\n              break;\n            outU8Array[outIdx++] = 248 | u >> 24;\n            outU8Array[outIdx++] = 128 | u >> 18 & 63;\n            outU8Array[outIdx++] = 128 | u >> 12 & 63;\n            outU8Array[outIdx++] = 128 | u >> 6 & 63;\n            outU8Array[outIdx++] = 128 | u & 63;\n          } else {\n            if (outIdx + 5 >= endIdx)\n              break;\n            outU8Array[outIdx++] = 252 | u >> 30;\n            outU8Array[outIdx++] = 128 | u >> 24 & 63;\n            outU8Array[outIdx++] = 128 | u >> 18 & 63;\n            outU8Array[outIdx++] = 128 | u >> 12 & 63;\n            outU8Array[outIdx++] = 128 | u >> 6 & 63;\n            outU8Array[outIdx++] = 128 | u & 63;\n          }\n        }\n        outU8Array[outIdx] = 0;\n        return outIdx - startIdx;\n      }\n      function stringToUTF8(str, outPtr, maxBytesToWrite) {\n        return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);\n      }\n      function lengthBytesUTF8(str) {\n        var len = 0;\n        for (var i = 0; i < str.length; ++i) {\n          var u = str.charCodeAt(i);\n          if (u >= 55296 && u <= 57343)\n            u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;\n          if (u <= 127) {\n            ++len;\n          } else if (u <= 2047) {\n            len += 2;\n          } else if (u <= 65535) {\n            len += 3;\n          } else if (u <= 2097151) {\n            len += 4;\n          } else if (u <= 67108863) {\n            len += 5;\n          } else {\n            len += 6;\n          }\n        }\n        return len;\n      }\n      var UTF16Decoder = typeof TextDecoder !== \"undefined\" ? new TextDecoder(\"utf-16le\") : void 0;\n      function allocateUTF8(str) {\n        var size = lengthBytesUTF8(str) + 1;\n        var ret = _malloc(size);\n        if (ret)\n          stringToUTF8Array(str, HEAP8, ret, size);\n        return ret;\n      }\n      function demangle(func) {\n        return func;\n      }\n      function demangleAll(text) {\n        var regex = /__Z[\\w\\d_]+/g;\n        return text.replace(regex, function(x) {\n          var y = demangle(x);\n          return x === y ? x : x + \" [\" + y + \"]\";\n        });\n      }\n      function jsStackTrace() {\n        var err2 = new Error();\n        if (!err2.stack) {\n          try {\n            throw new Error(0);\n          } catch (e) {\n            err2 = e;\n          }\n          if (!err2.stack) {\n            return \"(no stack trace available)\";\n          }\n        }\n        return err2.stack.toString();\n      }\n      function stackTrace() {\n        var js = jsStackTrace();\n        if (Module[\"extraStackTrace\"])\n          js += \"\\n\" + Module[\"extraStackTrace\"]();\n        return demangleAll(js);\n      }\n      var WASM_PAGE_SIZE = 65536;\n      var ASMJS_PAGE_SIZE = 16777216;\n      var MIN_TOTAL_MEMORY = 16777216;\n      function alignUp(x, multiple) {\n        if (x % multiple > 0) {\n          x += multiple - x % multiple;\n        }\n        return x;\n      }\n      var buffer;\n      var HEAP8;\n      var HEAPU8;\n      var HEAP16;\n      var HEAPU16;\n      var HEAP32;\n      var HEAPU32;\n      var HEAPF32;\n      var HEAPF64;\n      function updateGlobalBuffer(buf) {\n        Module[\"buffer\"] = buffer = buf;\n      }\n      function updateGlobalBufferViews() {\n        Module[\"HEAP8\"] = HEAP8 = new Int8Array(buffer);\n        Module[\"HEAP16\"] = HEAP16 = new Int16Array(buffer);\n        Module[\"HEAP32\"] = HEAP32 = new Int32Array(buffer);\n        Module[\"HEAPU8\"] = HEAPU8 = new Uint8Array(buffer);\n        Module[\"HEAPU16\"] = HEAPU16 = new Uint16Array(buffer);\n        Module[\"HEAPU32\"] = HEAPU32 = new Uint32Array(buffer);\n        Module[\"HEAPF32\"] = HEAPF32 = new Float32Array(buffer);\n        Module[\"HEAPF64\"] = HEAPF64 = new Float64Array(buffer);\n      }\n      var STATIC_BASE;\n      var STATICTOP;\n      var staticSealed;\n      var STACK_BASE;\n      var STACKTOP;\n      var STACK_MAX;\n      var DYNAMIC_BASE;\n      var DYNAMICTOP_PTR;\n      STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;\n      staticSealed = false;\n      function abortOnCannotGrowMemory() {\n        abort(\n          \"Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value \" + TOTAL_MEMORY + \", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 \"\n        );\n      }\n      if (!Module[\"reallocBuffer\"])\n        Module[\"reallocBuffer\"] = function(size) {\n          var ret;\n          try {\n            var oldHEAP8 = HEAP8;\n            ret = new ArrayBuffer(size);\n            var temp = new Int8Array(ret);\n            temp.set(oldHEAP8);\n          } catch (e) {\n            return false;\n          }\n          var success = _emscripten_replace_memory(ret);\n          if (!success)\n            return false;\n          return ret;\n        };\n      function enlargeMemory() {\n        var PAGE_MULTIPLE = Module[\"usingWasm\"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE;\n        var LIMIT = 2147483648 - PAGE_MULTIPLE;\n        if (HEAP32[DYNAMICTOP_PTR >> 2] > LIMIT) {\n          return false;\n        }\n        var OLD_TOTAL_MEMORY = TOTAL_MEMORY;\n        TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY);\n        while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR >> 2]) {\n          if (TOTAL_MEMORY <= 536870912) {\n            TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE);\n          } else {\n            TOTAL_MEMORY = Math.min(alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);\n          }\n        }\n        var replacement = Module[\"reallocBuffer\"](TOTAL_MEMORY);\n        if (!replacement || replacement.byteLength != TOTAL_MEMORY) {\n          TOTAL_MEMORY = OLD_TOTAL_MEMORY;\n          return false;\n        }\n        updateGlobalBuffer(replacement);\n        updateGlobalBufferViews();\n        return true;\n      }\n      var byteLength;\n      try {\n        byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, \"byteLength\").get);\n        byteLength(new ArrayBuffer(4));\n      } catch (e) {\n        byteLength = function(buffer2) {\n          return buffer2.byteLength;\n        };\n      }\n      var TOTAL_STACK = Module[\"TOTAL_STACK\"] || 5242880;\n      var TOTAL_MEMORY = Module[\"TOTAL_MEMORY\"] || 16777216;\n      if (TOTAL_MEMORY < TOTAL_STACK)\n        err(\"TOTAL_MEMORY should be larger than TOTAL_STACK, was \" + TOTAL_MEMORY + \"! (TOTAL_STACK=\" + TOTAL_STACK + \")\");\n      if (Module[\"buffer\"]) {\n        buffer = Module[\"buffer\"];\n      } else {\n        if (typeof WebAssembly === \"object\" && typeof WebAssembly.Memory === \"function\") {\n          Module[\"wasmMemory\"] = new WebAssembly.Memory({ initial: TOTAL_MEMORY / WASM_PAGE_SIZE });\n          buffer = Module[\"wasmMemory\"].buffer;\n        } else {\n          buffer = new ArrayBuffer(TOTAL_MEMORY);\n        }\n        Module[\"buffer\"] = buffer;\n      }\n      updateGlobalBufferViews();\n      function getTotalMemory() {\n        return TOTAL_MEMORY;\n      }\n      function callRuntimeCallbacks(callbacks) {\n        while (callbacks.length > 0) {\n          var callback = callbacks.shift();\n          if (typeof callback == \"function\") {\n            callback();\n            continue;\n          }\n          var func = callback.func;\n          if (typeof func === \"number\") {\n            if (callback.arg === void 0) {\n              Module[\"dynCall_v\"](func);\n            } else {\n              Module[\"dynCall_vi\"](func, callback.arg);\n            }\n          } else {\n            func(callback.arg === void 0 ? null : callback.arg);\n          }\n        }\n      }\n      var __ATPRERUN__ = [];\n      var __ATINIT__ = [];\n      var __ATMAIN__ = [];\n      var __ATEXIT__ = [];\n      var __ATPOSTRUN__ = [];\n      var runtimeInitialized = false;\n      function preRun() {\n        if (Module[\"preRun\"]) {\n          if (typeof Module[\"preRun\"] == \"function\")\n            Module[\"preRun\"] = [Module[\"preRun\"]];\n          while (Module[\"preRun\"].length) {\n            addOnPreRun(Module[\"preRun\"].shift());\n          }\n        }\n        callRuntimeCallbacks(__ATPRERUN__);\n      }\n      function ensureInitRuntime() {\n        if (runtimeInitialized)\n          return;\n        runtimeInitialized = true;\n        callRuntimeCallbacks(__ATINIT__);\n      }\n      function preMain() {\n        callRuntimeCallbacks(__ATMAIN__);\n      }\n      function postRun() {\n        if (Module[\"postRun\"]) {\n          if (typeof Module[\"postRun\"] == \"function\")\n            Module[\"postRun\"] = [Module[\"postRun\"]];\n          while (Module[\"postRun\"].length) {\n            addOnPostRun(Module[\"postRun\"].shift());\n          }\n        }\n        callRuntimeCallbacks(__ATPOSTRUN__);\n      }\n      function addOnPreRun(cb) {\n        __ATPRERUN__.unshift(cb);\n      }\n      function addOnPostRun(cb) {\n        __ATPOSTRUN__.unshift(cb);\n      }\n      function writeArrayToMemory(array, buffer2) {\n        HEAP8.set(array, buffer2);\n      }\n      var Math_pow = Math.pow;\n      var runDependencies = 0;\n      var runDependencyWatcher = null;\n      var dependenciesFulfilled = null;\n      function getUniqueRunDependency(id) {\n        return id;\n      }\n      function addRunDependency(id) {\n        runDependencies++;\n        if (Module[\"monitorRunDependencies\"]) {\n          Module[\"monitorRunDependencies\"](runDependencies);\n        }\n      }\n      function removeRunDependency(id) {\n        runDependencies--;\n        if (Module[\"monitorRunDependencies\"]) {\n          Module[\"monitorRunDependencies\"](runDependencies);\n        }\n        if (runDependencies == 0) {\n          if (runDependencyWatcher !== null) {\n            clearInterval(runDependencyWatcher);\n            runDependencyWatcher = null;\n          }\n          if (dependenciesFulfilled) {\n            var callback = dependenciesFulfilled;\n            dependenciesFulfilled = null;\n            callback();\n          }\n        }\n      }\n      Module[\"preloadedImages\"] = {};\n      Module[\"preloadedAudios\"] = {};\n      function integrateWasmJS() {\n        var wasmPageSize = 64 * 1024;\n        var info = { global: null, env: null, asm2wasm: asm2wasmImports, parent: Module };\n        var exports2 = null;\n        function mergeMemory(newBuffer) {\n          var oldBuffer = Module[\"buffer\"];\n          if (newBuffer.byteLength < oldBuffer.byteLength) {\n            err(\"the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here\");\n          }\n          var oldView = new Int8Array(oldBuffer);\n          var newView = new Int8Array(newBuffer);\n          newView.set(oldView);\n          updateGlobalBuffer(newBuffer);\n          updateGlobalBufferViews();\n        }\n        function fixImports(imports) {\n          return imports;\n        }\n        function doNativeWasm(global, env, providedBuffer) {\n          if (typeof WebAssembly !== \"object\") {\n            err(\"no native wasm support detected\");\n            return false;\n          }\n          if (!(Module[\"wasmMemory\"] instanceof WebAssembly.Memory)) {\n            err(\"no native wasm Memory in use\");\n            return false;\n          }\n          env[\"memory\"] = Module[\"wasmMemory\"];\n          info[\"global\"] = { NaN: NaN, Infinity: Infinity };\n          info[\"global.Math\"] = Math;\n          info[\"env\"] = env;\n          function receiveInstance(instance, module2) {\n            exports2 = instance.exports;\n            if (exports2.memory)\n              mergeMemory(exports2.memory);\n            Module[\"asm\"] = exports2;\n            Module[\"usingWasm\"] = true;\n            removeRunDependency(\"wasm-instantiate\");\n          }\n          addRunDependency(\"wasm-instantiate\");\n          if (Module[\"instantiateWasm\"]) {\n            try {\n              return Module[\"instantiateWasm\"](info, receiveInstance);\n            } catch (e) {\n              err(\"Module.instantiateWasm callback failed with error: \" + e);\n              return false;\n            }\n          }\n          function receiveInstantiatedSource(output) {\n            receiveInstance(output[\"instance\"], output[\"module\"]);\n          }\n          WebAssembly.instantiateStreaming(fetch(workerDataURI, { credentials: \"same-origin\" }), info).then(receiveInstantiatedSource).catch(function(reason) {\n            err(\"wasm streaming compile failed: \" + reason);\n          });\n          return {};\n        }\n        Module[\"asmPreload\"] = Module[\"asm\"];\n        var asmjsReallocBuffer = Module[\"reallocBuffer\"];\n        var wasmReallocBuffer = function(size) {\n          var PAGE_MULTIPLE = Module[\"usingWasm\"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE;\n          size = alignUp(size, PAGE_MULTIPLE);\n          var old = Module[\"buffer\"];\n          var oldSize = old.byteLength;\n          if (Module[\"usingWasm\"]) {\n            try {\n              var result = Module[\"wasmMemory\"].grow((size - oldSize) / wasmPageSize);\n              if (result !== (-1 | 0)) {\n                return Module[\"buffer\"] = Module[\"wasmMemory\"].buffer;\n              } else {\n                return null;\n              }\n            } catch (e) {\n              return null;\n            }\n          }\n        };\n        Module[\"reallocBuffer\"] = function(size) {\n          if (finalMethod === \"asmjs\") {\n            return asmjsReallocBuffer(size);\n          } else {\n            return wasmReallocBuffer(size);\n          }\n        };\n        var finalMethod = \"\";\n        Module[\"asm\"] = function(global, env, providedBuffer) {\n          env = fixImports(env);\n          if (!env[\"table\"]) {\n            var TABLE_SIZE = Module[\"wasmTableSize\"];\n            if (TABLE_SIZE === void 0)\n              TABLE_SIZE = 1024;\n            var MAX_TABLE_SIZE = Module[\"wasmMaxTableSize\"];\n            if (typeof WebAssembly === \"object\" && typeof WebAssembly.Table === \"function\") {\n              if (MAX_TABLE_SIZE !== void 0) {\n                env[\"table\"] = new WebAssembly.Table({ initial: TABLE_SIZE, maximum: MAX_TABLE_SIZE, element: \"anyfunc\" });\n              } else {\n                env[\"table\"] = new WebAssembly.Table({ initial: TABLE_SIZE, element: \"anyfunc\" });\n              }\n            } else {\n              env[\"table\"] = new Array(TABLE_SIZE);\n            }\n            Module[\"wasmTable\"] = env[\"table\"];\n          }\n          if (!env[\"memoryBase\"]) {\n            env[\"memoryBase\"] = Module[\"STATIC_BASE\"];\n          }\n          if (!env[\"tableBase\"]) {\n            env[\"tableBase\"] = 0;\n          }\n          var exports3;\n          exports3 = doNativeWasm(global, env, providedBuffer);\n          assert(exports3, \"no binaryen method succeeded.\");\n          return exports3;\n        };\n      }\n      integrateWasmJS();\n      STATIC_BASE = GLOBAL_BASE;\n      STATICTOP = STATIC_BASE + 56080;\n      __ATINIT__.push(\n        {\n          func: function() {\n            __GLOBAL__I_000101();\n          }\n        },\n        {\n          func: function() {\n            __GLOBAL__sub_I_iostream_cpp();\n          }\n        }\n      );\n      var STATIC_BUMP = 56080;\n      Module[\"STATIC_BASE\"] = STATIC_BASE;\n      Module[\"STATIC_BUMP\"] = STATIC_BUMP;\n      var tempDoublePtr = STATICTOP;\n      STATICTOP += 16;\n      function ___cxa_allocate_exception(size) {\n        return _malloc(size);\n      }\n      var EXCEPTIONS = {\n        last: 0,\n        caught: [],\n        infos: {},\n        deAdjust: function(adjusted) {\n          if (!adjusted || EXCEPTIONS.infos[adjusted])\n            return adjusted;\n          for (var key2 in EXCEPTIONS.infos) {\n            var ptr = +key2;\n            var info = EXCEPTIONS.infos[ptr];\n            if (info.adjusted === adjusted) {\n              return ptr;\n            }\n          }\n          return adjusted;\n        },\n        addRef: function(ptr) {\n          if (!ptr)\n            return;\n          var info = EXCEPTIONS.infos[ptr];\n          info.refcount++;\n        },\n        decRef: function(ptr) {\n          if (!ptr)\n            return;\n          var info = EXCEPTIONS.infos[ptr];\n          assert(info.refcount > 0);\n          info.refcount--;\n          if (info.refcount === 0 && !info.rethrown) {\n            if (info.destructor) {\n              Module[\"dynCall_vi\"](info.destructor, ptr);\n            }\n            delete EXCEPTIONS.infos[ptr];\n            ___cxa_free_exception(ptr);\n          }\n        },\n        clearRef: function(ptr) {\n          if (!ptr)\n            return;\n          var info = EXCEPTIONS.infos[ptr];\n          info.refcount = 0;\n        }\n      };\n      function ___resumeException(ptr) {\n        if (!EXCEPTIONS.last) {\n          EXCEPTIONS.last = ptr;\n        }\n        throw ptr + \" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.\";\n      }\n      function ___cxa_find_matching_catch() {\n        var thrown = EXCEPTIONS.last;\n        if (!thrown) {\n          return (setTempRet0(0), 0) | 0;\n        }\n        var info = EXCEPTIONS.infos[thrown];\n        var throwntype = info.type;\n        if (!throwntype) {\n          return (setTempRet0(0), thrown) | 0;\n        }\n        var typeArray = Array.prototype.slice.call(arguments);\n        var pointer = Module[\"___cxa_is_pointer_type\"](throwntype);\n        if (!___cxa_find_matching_catch.buffer)\n          ___cxa_find_matching_catch.buffer = _malloc(4);\n        HEAP32[___cxa_find_matching_catch.buffer >> 2] = thrown;\n        thrown = ___cxa_find_matching_catch.buffer;\n        for (var i = 0; i < typeArray.length; i++) {\n          if (typeArray[i] && Module[\"___cxa_can_catch\"](typeArray[i], throwntype, thrown)) {\n            thrown = HEAP32[thrown >> 2];\n            info.adjusted = thrown;\n            return (setTempRet0(typeArray[i]), thrown) | 0;\n          }\n        }\n        thrown = HEAP32[thrown >> 2];\n        return (setTempRet0(throwntype), thrown) | 0;\n      }\n      function ___cxa_throw(ptr, type, destructor) {\n        EXCEPTIONS.infos[ptr] = {\n          ptr,\n          adjusted: ptr,\n          type,\n          destructor,\n          refcount: 0,\n          caught: false,\n          rethrown: false\n        };\n        EXCEPTIONS.last = ptr;\n        if (!(\"uncaught_exception\" in __ZSt18uncaught_exceptionv)) {\n          __ZSt18uncaught_exceptionv.uncaught_exception = 1;\n        } else {\n          __ZSt18uncaught_exceptionv.uncaught_exception++;\n        }\n        throw ptr + \" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.\";\n      }\n      function ___cxa_uncaught_exception() {\n        return !!__ZSt18uncaught_exceptionv.uncaught_exception;\n      }\n      function ___gxx_personality_v0() {\n      }\n      function ___lock() {\n      }\n      var ERRNO_CODES = {\n        EPERM: 1,\n        ENOENT: 2,\n        ESRCH: 3,\n        EINTR: 4,\n        EIO: 5,\n        ENXIO: 6,\n        E2BIG: 7,\n        ENOEXEC: 8,\n        EBADF: 9,\n        ECHILD: 10,\n        EAGAIN: 11,\n        EWOULDBLOCK: 11,\n        ENOMEM: 12,\n        EACCES: 13,\n        EFAULT: 14,\n        ENOTBLK: 15,\n        EBUSY: 16,\n        EEXIST: 17,\n        EXDEV: 18,\n        ENODEV: 19,\n        ENOTDIR: 20,\n        EISDIR: 21,\n        EINVAL: 22,\n        ENFILE: 23,\n        EMFILE: 24,\n        ENOTTY: 25,\n        ETXTBSY: 26,\n        EFBIG: 27,\n        ENOSPC: 28,\n        ESPIPE: 29,\n        EROFS: 30,\n        EMLINK: 31,\n        EPIPE: 32,\n        EDOM: 33,\n        ERANGE: 34,\n        ENOMSG: 42,\n        EIDRM: 43,\n        ECHRNG: 44,\n        EL2NSYNC: 45,\n        EL3HLT: 46,\n        EL3RST: 47,\n        ELNRNG: 48,\n        EUNATCH: 49,\n        ENOCSI: 50,\n        EL2HLT: 51,\n        EDEADLK: 35,\n        ENOLCK: 37,\n        EBADE: 52,\n        EBADR: 53,\n        EXFULL: 54,\n        ENOANO: 55,\n        EBADRQC: 56,\n        EBADSLT: 57,\n        EDEADLOCK: 35,\n        EBFONT: 59,\n        ENOSTR: 60,\n        ENODATA: 61,\n        ETIME: 62,\n        ENOSR: 63,\n        ENONET: 64,\n        ENOPKG: 65,\n        EREMOTE: 66,\n        ENOLINK: 67,\n        EADV: 68,\n        ESRMNT: 69,\n        ECOMM: 70,\n        EPROTO: 71,\n        EMULTIHOP: 72,\n        EDOTDOT: 73,\n        EBADMSG: 74,\n        ENOTUNIQ: 76,\n        EBADFD: 77,\n        EREMCHG: 78,\n        ELIBACC: 79,\n        ELIBBAD: 80,\n        ELIBSCN: 81,\n        ELIBMAX: 82,\n        ELIBEXEC: 83,\n        ENOSYS: 38,\n        ENOTEMPTY: 39,\n        ENAMETOOLONG: 36,\n        ELOOP: 40,\n        EOPNOTSUPP: 95,\n        EPFNOSUPPORT: 96,\n        ECONNRESET: 104,\n        ENOBUFS: 105,\n        EAFNOSUPPORT: 97,\n        EPROTOTYPE: 91,\n        ENOTSOCK: 88,\n        ENOPROTOOPT: 92,\n        ESHUTDOWN: 108,\n        ECONNREFUSED: 111,\n        EADDRINUSE: 98,\n        ECONNABORTED: 103,\n        ENETUNREACH: 101,\n        ENETDOWN: 100,\n        ETIMEDOUT: 110,\n        EHOSTDOWN: 112,\n        EHOSTUNREACH: 113,\n        EINPROGRESS: 115,\n        EALREADY: 114,\n        EDESTADDRREQ: 89,\n        EMSGSIZE: 90,\n        EPROTONOSUPPORT: 93,\n        ESOCKTNOSUPPORT: 94,\n        EADDRNOTAVAIL: 99,\n        ENETRESET: 102,\n        EISCONN: 106,\n        ENOTCONN: 107,\n        ETOOMANYREFS: 109,\n        EUSERS: 87,\n        EDQUOT: 122,\n        ESTALE: 116,\n        ENOTSUP: 95,\n        ENOMEDIUM: 123,\n        EILSEQ: 84,\n        EOVERFLOW: 75,\n        ECANCELED: 125,\n        ENOTRECOVERABLE: 131,\n        EOWNERDEAD: 130,\n        ESTRPIPE: 86\n      };\n      function ___setErrNo(value) {\n        if (Module[\"___errno_location\"])\n          HEAP32[Module[\"___errno_location\"]() >> 2] = value;\n        return value;\n      }\n      function ___map_file(pathname, size) {\n        ___setErrNo(ERRNO_CODES.EPERM);\n        return -1;\n      }\n      var ERRNO_MESSAGES = {\n        0: \"Success\",\n        1: \"Not super-user\",\n        2: \"No such file or directory\",\n        3: \"No such process\",\n        4: \"Interrupted system call\",\n        5: \"I/O error\",\n        6: \"No such device or address\",\n        7: \"Arg list too long\",\n        8: \"Exec format error\",\n        9: \"Bad file number\",\n        10: \"No children\",\n        11: \"No more processes\",\n        12: \"Not enough core\",\n        13: \"Permission denied\",\n        14: \"Bad address\",\n        15: \"Block device required\",\n        16: \"Mount device busy\",\n        17: \"File exists\",\n        18: \"Cross-device link\",\n        19: \"No such device\",\n        20: \"Not a directory\",\n        21: \"Is a directory\",\n        22: \"Invalid argument\",\n        23: \"Too many open files in system\",\n        24: \"Too many open files\",\n        25: \"Not a typewriter\",\n        26: \"Text file busy\",\n        27: \"File too large\",\n        28: \"No space left on device\",\n        29: \"Illegal seek\",\n        30: \"Read only file system\",\n        31: \"Too many links\",\n        32: \"Broken pipe\",\n        33: \"Math arg out of domain of func\",\n        34: \"Math result not representable\",\n        35: \"File locking deadlock error\",\n        36: \"File or path name too long\",\n        37: \"No record locks available\",\n        38: \"Function not implemented\",\n        39: \"Directory not empty\",\n        40: \"Too many symbolic links\",\n        42: \"No message of desired type\",\n        43: \"Identifier removed\",\n        44: \"Channel number out of range\",\n        45: \"Level 2 not synchronized\",\n        46: \"Level 3 halted\",\n        47: \"Level 3 reset\",\n        48: \"Link number out of range\",\n        49: \"Protocol driver not attached\",\n        50: \"No CSI structure available\",\n        51: \"Level 2 halted\",\n        52: \"Invalid exchange\",\n        53: \"Invalid request descriptor\",\n        54: \"Exchange full\",\n        55: \"No anode\",\n        56: \"Invalid request code\",\n        57: \"Invalid slot\",\n        59: \"Bad font file fmt\",\n        60: \"Device not a stream\",\n        61: \"No data (for no delay io)\",\n        62: \"Timer expired\",\n        63: \"Out of streams resources\",\n        64: \"Machine is not on the network\",\n        65: \"Package not installed\",\n        66: \"The object is remote\",\n        67: \"The link has been severed\",\n        68: \"Advertise error\",\n        69: \"Srmount error\",\n        70: \"Communication error on send\",\n        71: \"Protocol error\",\n        72: \"Multihop attempted\",\n        73: \"Cross mount point (not really error)\",\n        74: \"Trying to read unreadable message\",\n        75: \"Value too large for defined data type\",\n        76: \"Given log. name not unique\",\n        77: \"f.d. invalid for this operation\",\n        78: \"Remote address changed\",\n        79: \"Can   access a needed shared lib\",\n        80: \"Accessing a corrupted shared lib\",\n        81: \".lib section in a.out corrupted\",\n        82: \"Attempting to link in too many libs\",\n        83: \"Attempting to exec a shared library\",\n        84: \"Illegal byte sequence\",\n        86: \"Streams pipe error\",\n        87: \"Too many users\",\n        88: \"Socket operation on non-socket\",\n        89: \"Destination address required\",\n        90: \"Message too long\",\n        91: \"Protocol wrong type for socket\",\n        92: \"Protocol not available\",\n        93: \"Unknown protocol\",\n        94: \"Socket type not supported\",\n        95: \"Not supported\",\n        96: \"Protocol family not supported\",\n        97: \"Address family not supported by protocol family\",\n        98: \"Address already in use\",\n        99: \"Address not available\",\n        100: \"Network interface is not configured\",\n        101: \"Network is unreachable\",\n        102: \"Connection reset by network\",\n        103: \"Connection aborted\",\n        104: \"Connection reset by peer\",\n        105: \"No buffer space available\",\n        106: \"Socket is already connected\",\n        107: \"Socket is not connected\",\n        108: \"Can't send after socket shutdown\",\n        109: \"Too many references\",\n        110: \"Connection timed out\",\n        111: \"Connection refused\",\n        112: \"Host is down\",\n        113: \"Host is unreachable\",\n        114: \"Socket already connected\",\n        115: \"Connection already in progress\",\n        116: \"Stale file handle\",\n        122: \"Quota exceeded\",\n        123: \"No medium (in tape drive)\",\n        125: \"Operation canceled\",\n        130: \"Previous owner died\",\n        131: \"State not recoverable\"\n      };\n      var PATH = {\n        splitPath: function(filename) {\n          var splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n          return splitPathRe.exec(filename).slice(1);\n        },\n        normalizeArray: function(parts, allowAboveRoot) {\n          var up = 0;\n          for (var i = parts.length - 1; i >= 0; i--) {\n            var last = parts[i];\n            if (last === \".\") {\n              parts.splice(i, 1);\n            } else if (last === \"..\") {\n              parts.splice(i, 1);\n              up++;\n            } else if (up) {\n              parts.splice(i, 1);\n              up--;\n            }\n          }\n          if (allowAboveRoot) {\n            for (; up; up--) {\n              parts.unshift(\"..\");\n            }\n          }\n          return parts;\n        },\n        normalize: function(path2) {\n          var isAbsolute = path2.charAt(0) === \"/\", trailingSlash = path2.substr(-1) === \"/\";\n          path2 = PATH.normalizeArray(\n            path2.split(\"/\").filter(function(p) {\n              return !!p;\n            }),\n            !isAbsolute\n          ).join(\"/\");\n          if (!path2 && !isAbsolute) {\n            path2 = \".\";\n          }\n          if (path2 && trailingSlash) {\n            path2 += \"/\";\n          }\n          return (isAbsolute ? \"/\" : \"\") + path2;\n        },\n        dirname: function(path2) {\n          var result = PATH.splitPath(path2), root = result[0], dir = result[1];\n          if (!root && !dir) {\n            return \".\";\n          }\n          if (dir) {\n            dir = dir.substr(0, dir.length - 1);\n          }\n          return root + dir;\n        },\n        basename: function(path2) {\n          if (path2 === \"/\")\n            return \"/\";\n          var lastSlash = path2.lastIndexOf(\"/\");\n          if (lastSlash === -1)\n            return path2;\n          return path2.substr(lastSlash + 1);\n        },\n        extname: function(path2) {\n          return PATH.splitPath(path2)[3];\n        },\n        join: function() {\n          var paths = Array.prototype.slice.call(arguments, 0);\n          return PATH.normalize(paths.join(\"/\"));\n        },\n        join2: function(l, r) {\n          return PATH.normalize(l + \"/\" + r);\n        },\n        resolve: function() {\n          var resolvedPath = \"\", resolvedAbsolute = false;\n          for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n            var path2 = i >= 0 ? arguments[i] : FS.cwd();\n            if (typeof path2 !== \"string\") {\n              throw new TypeError(\"Arguments to path.resolve must be strings\");\n            } else if (!path2) {\n              return \"\";\n            }\n            resolvedPath = path2 + \"/\" + resolvedPath;\n            resolvedAbsolute = path2.charAt(0) === \"/\";\n          }\n          resolvedPath = PATH.normalizeArray(\n            resolvedPath.split(\"/\").filter(function(p) {\n              return !!p;\n            }),\n            !resolvedAbsolute\n          ).join(\"/\");\n          return (resolvedAbsolute ? \"/\" : \"\") + resolvedPath || \".\";\n        },\n        relative: function(from, to) {\n          from = PATH.resolve(from).substr(1);\n          to = PATH.resolve(to).substr(1);\n          function trim(arr) {\n            var start = 0;\n            for (; start < arr.length; start++) {\n              if (arr[start] !== \"\")\n                break;\n            }\n            var end = arr.length - 1;\n            for (; end >= 0; end--) {\n              if (arr[end] !== \"\")\n                break;\n            }\n            if (start > end)\n              return [];\n            return arr.slice(start, end - start + 1);\n          }\n          var fromParts = trim(from.split(\"/\"));\n          var toParts = trim(to.split(\"/\"));\n          var length = Math.min(fromParts.length, toParts.length);\n          var samePartsLength = length;\n          for (var i = 0; i < length; i++) {\n            if (fromParts[i] !== toParts[i]) {\n              samePartsLength = i;\n              break;\n            }\n          }\n          var outputParts = [];\n          for (var i = samePartsLength; i < fromParts.length; i++) {\n            outputParts.push(\"..\");\n          }\n          outputParts = outputParts.concat(toParts.slice(samePartsLength));\n          return outputParts.join(\"/\");\n        }\n      };\n      var TTY = {\n        ttys: [],\n        init: function() {\n        },\n        shutdown: function() {\n        },\n        register: function(dev, ops) {\n          TTY.ttys[dev] = { input: [], output: [], ops };\n          FS.registerDevice(dev, TTY.stream_ops);\n        },\n        stream_ops: {\n          open: function(stream) {\n            var tty = TTY.ttys[stream.node.rdev];\n            if (!tty) {\n              throw new FS.ErrnoError(ERRNO_CODES.ENODEV);\n            }\n            stream.tty = tty;\n            stream.seekable = false;\n          },\n          close: function(stream) {\n            stream.tty.ops.flush(stream.tty);\n          },\n          flush: function(stream) {\n            stream.tty.ops.flush(stream.tty);\n          },\n          read: function(stream, buffer2, offset, length, pos) {\n            if (!stream.tty || !stream.tty.ops.get_char) {\n              throw new FS.ErrnoError(ERRNO_CODES.ENXIO);\n            }\n            var bytesRead = 0;\n            for (var i = 0; i < length; i++) {\n              var result;\n              try {\n                result = stream.tty.ops.get_char(stream.tty);\n              } catch (e) {\n                throw new FS.ErrnoError(ERRNO_CODES.EIO);\n              }\n              if (result === void 0 && bytesRead === 0) {\n                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);\n              }\n              if (result === null || result === void 0)\n                break;\n              bytesRead++;\n              buffer2[offset + i] = result;\n            }\n            if (bytesRead) {\n              stream.node.timestamp = Date.now();\n            }\n            return bytesRead;\n          },\n          write: function(stream, buffer2, offset, length, pos) {\n            if (!stream.tty || !stream.tty.ops.put_char) {\n              throw new FS.ErrnoError(ERRNO_CODES.ENXIO);\n            }\n            for (var i = 0; i < length; i++) {\n              try {\n                stream.tty.ops.put_char(stream.tty, buffer2[offset + i]);\n              } catch (e) {\n                throw new FS.ErrnoError(ERRNO_CODES.EIO);\n              }\n            }\n            if (length) {\n              stream.node.timestamp = Date.now();\n            }\n            return i;\n          }\n        },\n        default_tty_ops: {\n          get_char: function(tty) {\n            if (!tty.input.length) {\n              var result = null;\n              if (ENVIRONMENT_IS_NODE) {\n                var BUFSIZE = 256;\n                var buf = new Buffer(BUFSIZE);\n                var bytesRead = 0;\n                var isPosixPlatform = process.platform != \"win32\";\n                var fd = process.stdin.fd;\n                if (isPosixPlatform) {\n                  var usingDevice = false;\n                  try {\n                    fd = fs.openSync(\"/dev/stdin\", \"r\");\n                    usingDevice = true;\n                  } catch (e) {\n                  }\n                }\n                try {\n                  bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);\n                } catch (e) {\n                  if (e.toString().indexOf(\"EOF\") != -1)\n                    bytesRead = 0;\n                  else\n                    throw e;\n                }\n                if (usingDevice) {\n                  fs.closeSync(fd);\n                }\n                if (bytesRead > 0) {\n                  result = buf.slice(0, bytesRead).toString(\"utf-8\");\n                } else {\n                  result = null;\n                }\n              } else if (typeof window != \"undefined\" && typeof window.prompt == \"function\") {\n                result = window.prompt(\"Input: \");\n                if (result !== null) {\n                  result += \"\\n\";\n                }\n              } else if (typeof readline == \"function\") {\n                result = readline();\n                if (result !== null) {\n                  result += \"\\n\";\n                }\n              }\n              if (!result) {\n                return null;\n              }\n              tty.input = intArrayFromString(result, true);\n            }\n            return tty.input.shift();\n          },\n          put_char: function(tty, val) {\n            if (val === null || val === 10) {\n              out(UTF8ArrayToString(tty.output, 0));\n              tty.output = [];\n            } else {\n              if (val != 0)\n                tty.output.push(val);\n            }\n          },\n          flush: function(tty) {\n            if (tty.output && tty.output.length > 0) {\n              out(UTF8ArrayToString(tty.output, 0));\n              tty.output = [];\n            }\n          }\n        },\n        default_tty1_ops: {\n          put_char: function(tty, val) {\n            if (val === null || val === 10) {\n              err(UTF8ArrayToString(tty.output, 0));\n              tty.output = [];\n            } else {\n              if (val != 0)\n                tty.output.push(val);\n            }\n          },\n          flush: function(tty) {\n            if (tty.output && tty.output.length > 0) {\n              err(UTF8ArrayToString(tty.output, 0));\n              tty.output = [];\n            }\n          }\n        }\n      };\n      var MEMFS = {\n        ops_table: null,\n        mount: function(mount) {\n          return MEMFS.createNode(null, \"/\", 16384 | 511, 0);\n        },\n        createNode: function(parent, name, mode, dev) {\n          if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {\n            throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n          }\n          if (!MEMFS.ops_table) {\n            MEMFS.ops_table = {\n              dir: {\n                node: {\n                  getattr: MEMFS.node_ops.getattr,\n                  setattr: MEMFS.node_ops.setattr,\n                  lookup: MEMFS.node_ops.lookup,\n                  mknod: MEMFS.node_ops.mknod,\n                  rename: MEMFS.node_ops.rename,\n                  unlink: MEMFS.node_ops.unlink,\n                  rmdir: MEMFS.node_ops.rmdir,\n                  readdir: MEMFS.node_ops.readdir,\n                  symlink: MEMFS.node_ops.symlink\n                },\n                stream: { llseek: MEMFS.stream_ops.llseek }\n              },\n              file: {\n                node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr },\n                stream: {\n                  llseek: MEMFS.stream_ops.llseek,\n                  read: MEMFS.stream_ops.read,\n                  write: MEMFS.stream_ops.write,\n                  allocate: MEMFS.stream_ops.allocate,\n                  mmap: MEMFS.stream_ops.mmap,\n                  msync: MEMFS.stream_ops.msync\n                }\n              },\n              link: {\n                node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr, readlink: MEMFS.node_ops.readlink },\n                stream: {}\n              },\n              chrdev: {\n                node: { getattr: MEMFS.node_ops.getattr, setattr: MEMFS.node_ops.setattr },\n                stream: FS.chrdev_stream_ops\n              }\n            };\n          }\n          var node = FS.createNode(parent, name, mode, dev);\n          if (FS.isDir(node.mode)) {\n            node.node_ops = MEMFS.ops_table.dir.node;\n            node.stream_ops = MEMFS.ops_table.dir.stream;\n            node.contents = {};\n          } else if (FS.isFile(node.mode)) {\n            node.node_ops = MEMFS.ops_table.file.node;\n            node.stream_ops = MEMFS.ops_table.file.stream;\n            node.usedBytes = 0;\n            node.contents = null;\n          } else if (FS.isLink(node.mode)) {\n            node.node_ops = MEMFS.ops_table.link.node;\n            node.stream_ops = MEMFS.ops_table.link.stream;\n          } else if (FS.isChrdev(node.mode)) {\n            node.node_ops = MEMFS.ops_table.chrdev.node;\n            node.stream_ops = MEMFS.ops_table.chrdev.stream;\n          }\n          node.timestamp = Date.now();\n          if (parent) {\n            parent.contents[name] = node;\n          }\n          return node;\n        },\n        getFileDataAsRegularArray: function(node) {\n          if (node.contents && node.contents.subarray) {\n            var arr = [];\n            for (var i = 0; i < node.usedBytes; ++i)\n              arr.push(node.contents[i]);\n            return arr;\n          }\n          return node.contents;\n        },\n        getFileDataAsTypedArray: function(node) {\n          if (!node.contents)\n            return new Uint8Array();\n          if (node.contents.subarray)\n            return node.contents.subarray(0, node.usedBytes);\n          return new Uint8Array(node.contents);\n        },\n        expandFileStorage: function(node, newCapacity) {\n          if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {\n            node.contents = MEMFS.getFileDataAsRegularArray(node);\n            node.usedBytes = node.contents.length;\n          }\n          if (!node.contents || node.contents.subarray) {\n            var prevCapacity = node.contents ? node.contents.length : 0;\n            if (prevCapacity >= newCapacity)\n              return;\n            var CAPACITY_DOUBLING_MAX = 1024 * 1024;\n            newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) | 0);\n            if (prevCapacity != 0)\n              newCapacity = Math.max(newCapacity, 256);\n            var oldContents = node.contents;\n            node.contents = new Uint8Array(newCapacity);\n            if (node.usedBytes > 0)\n              node.contents.set(oldContents.subarray(0, node.usedBytes), 0);\n            return;\n          }\n          if (!node.contents && newCapacity > 0)\n            node.contents = [];\n          while (node.contents.length < newCapacity)\n            node.contents.push(0);\n        },\n        resizeFileStorage: function(node, newSize) {\n          if (node.usedBytes == newSize)\n            return;\n          if (newSize == 0) {\n            node.contents = null;\n            node.usedBytes = 0;\n            return;\n          }\n          if (!node.contents || node.contents.subarray) {\n            var oldContents = node.contents;\n            node.contents = new Uint8Array(new ArrayBuffer(newSize));\n            if (oldContents) {\n              node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));\n            }\n            node.usedBytes = newSize;\n            return;\n          }\n          if (!node.contents)\n            node.contents = [];\n          if (node.contents.length > newSize)\n            node.contents.length = newSize;\n          else\n            while (node.contents.length < newSize)\n              node.contents.push(0);\n          node.usedBytes = newSize;\n        },\n        node_ops: {\n          getattr: function(node) {\n            var attr = {};\n            attr.dev = FS.isChrdev(node.mode) ? node.id : 1;\n            attr.ino = node.id;\n            attr.mode = node.mode;\n            attr.nlink = 1;\n            attr.uid = 0;\n            attr.gid = 0;\n            attr.rdev = node.rdev;\n            if (FS.isDir(node.mode)) {\n              attr.size = 4096;\n            } else if (FS.isFile(node.mode)) {\n              attr.size = node.usedBytes;\n            } else if (FS.isLink(node.mode)) {\n              attr.size = node.link.length;\n            } else {\n              attr.size = 0;\n            }\n            attr.atime = new Date(node.timestamp);\n            attr.mtime = new Date(node.timestamp);\n            attr.ctime = new Date(node.timestamp);\n            attr.blksize = 4096;\n            attr.blocks = Math.ceil(attr.size / attr.blksize);\n            return attr;\n          },\n          setattr: function(node, attr) {\n            if (attr.mode !== void 0) {\n              node.mode = attr.mode;\n            }\n            if (attr.timestamp !== void 0) {\n              node.timestamp = attr.timestamp;\n            }\n            if (attr.size !== void 0) {\n              MEMFS.resizeFileStorage(node, attr.size);\n            }\n          },\n          lookup: function(parent, name) {\n            throw FS.genericErrors[ERRNO_CODES.ENOENT];\n          },\n          mknod: function(parent, name, mode, dev) {\n            return MEMFS.createNode(parent, name, mode, dev);\n          },\n          rename: function(old_node, new_dir, new_name) {\n            if (FS.isDir(old_node.mode)) {\n              var new_node;\n              try {\n                new_node = FS.lookupNode(new_dir, new_name);\n              } catch (e) {\n              }\n              if (new_node) {\n                for (var i in new_node.contents) {\n                  throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);\n                }\n              }\n            }\n            delete old_node.parent.contents[old_node.name];\n            old_node.name = new_name;\n            new_dir.contents[new_name] = old_node;\n            old_node.parent = new_dir;\n          },\n          unlink: function(parent, name) {\n            delete parent.contents[name];\n          },\n          rmdir: function(parent, name) {\n            var node = FS.lookupNode(parent, name);\n            for (var i in node.contents) {\n              throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);\n            }\n            delete parent.contents[name];\n          },\n          readdir: function(node) {\n            var entries = [\".\", \"..\"];\n            for (var key2 in node.contents) {\n              if (!node.contents.hasOwnProperty(key2)) {\n                continue;\n              }\n              entries.push(key2);\n            }\n            return entries;\n          },\n          symlink: function(parent, newname, oldpath) {\n            var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);\n            node.link = oldpath;\n            return node;\n          },\n          readlink: function(node) {\n            if (!FS.isLink(node.mode)) {\n              throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n            }\n            return node.link;\n          }\n        },\n        stream_ops: {\n          read: function(stream, buffer2, offset, length, position) {\n            var contents = stream.node.contents;\n            if (position >= stream.node.usedBytes)\n              return 0;\n            var size = Math.min(stream.node.usedBytes - position, length);\n            assert(size >= 0);\n            if (size > 8 && contents.subarray) {\n              buffer2.set(contents.subarray(position, position + size), offset);\n            } else {\n              for (var i = 0; i < size; i++)\n                buffer2[offset + i] = contents[position + i];\n            }\n            return size;\n          },\n          write: function(stream, buffer2, offset, length, position, canOwn) {\n            if (!length)\n              return 0;\n            var node = stream.node;\n            node.timestamp = Date.now();\n            if (buffer2.subarray && (!node.contents || node.contents.subarray)) {\n              if (canOwn) {\n                node.contents = buffer2.subarray(offset, offset + length);\n                node.usedBytes = length;\n                return length;\n              } else if (node.usedBytes === 0 && position === 0) {\n                node.contents = new Uint8Array(buffer2.subarray(offset, offset + length));\n                node.usedBytes = length;\n                return length;\n              } else if (position + length <= node.usedBytes) {\n                node.contents.set(buffer2.subarray(offset, offset + length), position);\n                return length;\n              }\n            }\n            MEMFS.expandFileStorage(node, position + length);\n            if (node.contents.subarray && buffer2.subarray)\n              node.contents.set(buffer2.subarray(offset, offset + length), position);\n            else {\n              for (var i = 0; i < length; i++) {\n                node.contents[position + i] = buffer2[offset + i];\n              }\n            }\n            node.usedBytes = Math.max(node.usedBytes, position + length);\n            return length;\n          },\n          llseek: function(stream, offset, whence) {\n            var position = offset;\n            if (whence === 1) {\n              position += stream.position;\n            } else if (whence === 2) {\n              if (FS.isFile(stream.node.mode)) {\n                position += stream.node.usedBytes;\n              }\n            }\n            if (position < 0) {\n              throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n            }\n            return position;\n          },\n          allocate: function(stream, offset, length) {\n            MEMFS.expandFileStorage(stream.node, offset + length);\n            stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);\n          },\n          mmap: function(stream, buffer2, offset, length, position, prot, flags) {\n            if (!FS.isFile(stream.node.mode)) {\n              throw new FS.ErrnoError(ERRNO_CODES.ENODEV);\n            }\n            var ptr;\n            var allocated;\n            var contents = stream.node.contents;\n            if (!(flags & 2) && (contents.buffer === buffer2 || contents.buffer === buffer2.buffer)) {\n              allocated = false;\n              ptr = contents.byteOffset;\n            } else {\n              if (position > 0 || position + length < stream.node.usedBytes) {\n                if (contents.subarray) {\n                  contents = contents.subarray(position, position + length);\n                } else {\n                  contents = Array.prototype.slice.call(contents, position, position + length);\n                }\n              }\n              allocated = true;\n              ptr = _malloc(length);\n              if (!ptr) {\n                throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);\n              }\n              buffer2.set(contents, ptr);\n            }\n            return { ptr, allocated };\n          },\n          msync: function(stream, buffer2, offset, length, mmapFlags) {\n            if (!FS.isFile(stream.node.mode)) {\n              throw new FS.ErrnoError(ERRNO_CODES.ENODEV);\n            }\n            if (mmapFlags & 2) {\n              return 0;\n            }\n            var bytesWritten = MEMFS.stream_ops.write(stream, buffer2, 0, length, offset, false);\n            return 0;\n          }\n        }\n      };\n      var IDBFS = {\n        dbs: {},\n        indexedDB: function() {\n          if (typeof indexedDB !== \"undefined\")\n            return indexedDB;\n          var ret = null;\n          if (typeof window === \"object\")\n            ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n          assert(ret, \"IDBFS used, but indexedDB not supported\");\n          return ret;\n        },\n        DB_VERSION: 21,\n        DB_STORE_NAME: \"FILE_DATA\",\n        mount: function(mount) {\n          return MEMFS.mount.apply(null, arguments);\n        },\n        syncfs: function(mount, populate, callback) {\n          IDBFS.getLocalSet(mount, function(err2, local) {\n            if (err2)\n              return callback(err2);\n            IDBFS.getRemoteSet(mount, function(err3, remote) {\n              if (err3)\n                return callback(err3);\n              var src = populate ? remote : local;\n              var dst = populate ? local : remote;\n              IDBFS.reconcile(src, dst, callback);\n            });\n          });\n        },\n        getDB: function(name, callback) {\n          var db = IDBFS.dbs[name];\n          if (db) {\n            return callback(null, db);\n          }\n          var req;\n          try {\n            req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);\n          } catch (e) {\n            return callback(e);\n          }\n          if (!req) {\n            return callback(\"Unable to connect to IndexedDB\");\n          }\n          req.onupgradeneeded = function(e) {\n            var db2 = e.target.result;\n            var transaction = e.target.transaction;\n            var fileStore;\n            if (db2.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {\n              fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);\n            } else {\n              fileStore = db2.createObjectStore(IDBFS.DB_STORE_NAME);\n            }\n            if (!fileStore.indexNames.contains(\"timestamp\")) {\n              fileStore.createIndex(\"timestamp\", \"timestamp\", { unique: false });\n            }\n          };\n          req.onsuccess = function() {\n            db = req.result;\n            IDBFS.dbs[name] = db;\n            callback(null, db);\n          };\n          req.onerror = function(e) {\n            callback(this.error);\n            e.preventDefault();\n          };\n        },\n        getLocalSet: function(mount, callback) {\n          var entries = {};\n          function isRealDir(p) {\n            return p !== \".\" && p !== \"..\";\n          }\n          function toAbsolute(root) {\n            return function(p) {\n              return PATH.join2(root, p);\n            };\n          }\n          var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));\n          while (check.length) {\n            var path2 = check.pop();\n            var stat;\n            try {\n              stat = FS.stat(path2);\n            } catch (e) {\n              return callback(e);\n            }\n            if (FS.isDir(stat.mode)) {\n              check.push.apply(check, FS.readdir(path2).filter(isRealDir).map(toAbsolute(path2)));\n            }\n            entries[path2] = { timestamp: stat.mtime };\n          }\n          return callback(null, { type: \"local\", entries });\n        },\n        getRemoteSet: function(mount, callback) {\n          var entries = {};\n          IDBFS.getDB(mount.mountpoint, function(err2, db) {\n            if (err2)\n              return callback(err2);\n            try {\n              var transaction = db.transaction([IDBFS.DB_STORE_NAME], \"readonly\");\n              transaction.onerror = function(e) {\n                callback(this.error);\n                e.preventDefault();\n              };\n              var store = transaction.objectStore(IDBFS.DB_STORE_NAME);\n              var index = store.index(\"timestamp\");\n              index.openKeyCursor().onsuccess = function(event) {\n                var cursor = event.target.result;\n                if (!cursor) {\n                  return callback(null, { type: \"remote\", db, entries });\n                }\n                entries[cursor.primaryKey] = { timestamp: cursor.key };\n                cursor.continue();\n              };\n            } catch (e) {\n              return callback(e);\n            }\n          });\n        },\n        loadLocalEntry: function(path2, callback) {\n          var stat, node;\n          try {\n            var lookup = FS.lookupPath(path2);\n            node = lookup.node;\n            stat = FS.stat(path2);\n          } catch (e) {\n            return callback(e);\n          }\n          if (FS.isDir(stat.mode)) {\n            return callback(null, { timestamp: stat.mtime, mode: stat.mode });\n          } else if (FS.isFile(stat.mode)) {\n            node.contents = MEMFS.getFileDataAsTypedArray(node);\n            return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });\n          } else {\n            return callback(new Error(\"node type not supported\"));\n          }\n        },\n        storeLocalEntry: function(path2, entry, callback) {\n          try {\n            if (FS.isDir(entry.mode)) {\n              FS.mkdir(path2, entry.mode);\n            } else if (FS.isFile(entry.mode)) {\n              FS.writeFile(path2, entry.contents, { canOwn: true });\n            } else {\n              return callback(new Error(\"node type not supported\"));\n            }\n            FS.chmod(path2, entry.mode);\n            FS.utime(path2, entry.timestamp, entry.timestamp);\n          } catch (e) {\n            return callback(e);\n          }\n          callback(null);\n        },\n        removeLocalEntry: function(path2, callback) {\n          try {\n            var lookup = FS.lookupPath(path2);\n            var stat = FS.stat(path2);\n            if (FS.isDir(stat.mode)) {\n              FS.rmdir(path2);\n            } else if (FS.isFile(stat.mode)) {\n              FS.unlink(path2);\n            }\n          } catch (e) {\n            return callback(e);\n          }\n          callback(null);\n        },\n        loadRemoteEntry: function(store, path2, callback) {\n          var req = store.get(path2);\n          req.onsuccess = function(event) {\n            callback(null, event.target.result);\n          };\n          req.onerror = function(e) {\n            callback(this.error);\n            e.preventDefault();\n          };\n        },\n        storeRemoteEntry: function(store, path2, entry, callback) {\n          var req = store.put(entry, path2);\n          req.onsuccess = function() {\n            callback(null);\n          };\n          req.onerror = function(e) {\n            callback(this.error);\n            e.preventDefault();\n          };\n        },\n        removeRemoteEntry: function(store, path2, callback) {\n          var req = store.delete(path2);\n          req.onsuccess = function() {\n            callback(null);\n          };\n          req.onerror = function(e) {\n            callback(this.error);\n            e.preventDefault();\n          };\n        },\n        reconcile: function(src, dst, callback) {\n          var total = 0;\n          var create = [];\n          Object.keys(src.entries).forEach(function(key2) {\n            var e = src.entries[key2];\n            var e2 = dst.entries[key2];\n            if (!e2 || e.timestamp > e2.timestamp) {\n              create.push(key2);\n              total++;\n            }\n          });\n          var remove = [];\n          Object.keys(dst.entries).forEach(function(key2) {\n            var e = dst.entries[key2];\n            var e2 = src.entries[key2];\n            if (!e2) {\n              remove.push(key2);\n              total++;\n            }\n          });\n          if (!total) {\n            return callback(null);\n          }\n          var completed = 0;\n          var db = src.type === \"remote\" ? src.db : dst.db;\n          var transaction = db.transaction([IDBFS.DB_STORE_NAME], \"readwrite\");\n          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);\n          function done(err2) {\n            if (err2) {\n              if (!done.errored) {\n                done.errored = true;\n                return callback(err2);\n              }\n              return;\n            }\n            if (++completed >= total) {\n              return callback(null);\n            }\n          }\n          transaction.onerror = function(e) {\n            done(this.error);\n            e.preventDefault();\n          };\n          create.sort().forEach(function(path2) {\n            if (dst.type === \"local\") {\n              IDBFS.loadRemoteEntry(store, path2, function(err2, entry) {\n                if (err2)\n                  return done(err2);\n                IDBFS.storeLocalEntry(path2, entry, done);\n              });\n            } else {\n              IDBFS.loadLocalEntry(path2, function(err2, entry) {\n                if (err2)\n                  return done(err2);\n                IDBFS.storeRemoteEntry(store, path2, entry, done);\n              });\n            }\n          });\n          remove.sort().reverse().forEach(function(path2) {\n            if (dst.type === \"local\") {\n              IDBFS.removeLocalEntry(path2, done);\n            } else {\n              IDBFS.removeRemoteEntry(store, path2, done);\n            }\n          });\n        }\n      };\n      var NODEFS = {\n        isWindows: false,\n        staticInit: function() {\n          NODEFS.isWindows = !!process.platform.match(/^win/);\n          var flags = process[\"binding\"](\"constants\");\n          if (flags[\"fs\"]) {\n            flags = flags[\"fs\"];\n          }\n          NODEFS.flagsForNodeMap = {\n            \"1024\": flags[\"O_APPEND\"],\n            \"64\": flags[\"O_CREAT\"],\n            \"128\": flags[\"O_EXCL\"],\n            \"0\": flags[\"O_RDONLY\"],\n            \"2\": flags[\"O_RDWR\"],\n            \"4096\": flags[\"O_SYNC\"],\n            \"512\": flags[\"O_TRUNC\"],\n            \"1\": flags[\"O_WRONLY\"]\n          };\n        },\n        bufferFrom: function(arrayBuffer) {\n          return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);\n        },\n        mount: function(mount) {\n          assert(ENVIRONMENT_IS_NODE);\n          return NODEFS.createNode(null, \"/\", NODEFS.getMode(mount.opts.root), 0);\n        },\n        createNode: function(parent, name, mode, dev) {\n          if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {\n            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n          }\n          var node = FS.createNode(parent, name, mode);\n          node.node_ops = NODEFS.node_ops;\n          node.stream_ops = NODEFS.stream_ops;\n          return node;\n        },\n        getMode: function(path2) {\n          var stat;\n          try {\n            stat = fs.lstatSync(path2);\n            if (NODEFS.isWindows) {\n              stat.mode = stat.mode | (stat.mode & 292) >> 2;\n            }\n          } catch (e) {\n            if (!e.code)\n              throw e;\n            throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n          }\n          return stat.mode;\n        },\n        realPath: function(node) {\n          var parts = [];\n          while (node.parent !== node) {\n            parts.push(node.name);\n            node = node.parent;\n          }\n          parts.push(node.mount.opts.root);\n          parts.reverse();\n          return PATH.join.apply(null, parts);\n        },\n        flagsForNode: function(flags) {\n          flags &= ~2097152;\n          flags &= ~2048;\n          flags &= ~32768;\n          flags &= ~524288;\n          var newFlags = 0;\n          for (var k in NODEFS.flagsForNodeMap) {\n            if (flags & k) {\n              newFlags |= NODEFS.flagsForNodeMap[k];\n              flags ^= k;\n            }\n          }\n          if (!flags) {\n            return newFlags;\n          } else {\n            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n          }\n        },\n        node_ops: {\n          getattr: function(node) {\n            var path2 = NODEFS.realPath(node);\n            var stat;\n            try {\n              stat = fs.lstatSync(path2);\n            } catch (e) {\n              if (!e.code)\n                throw e;\n              throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n            }\n            if (NODEFS.isWindows && !stat.blksize) {\n              stat.blksize = 4096;\n            }\n            if (NODEFS.isWindows && !stat.blocks) {\n              stat.blocks = (stat.size + stat.blksize - 1) / stat.blksize | 0;\n            }\n            return {\n              dev: stat.dev,\n              ino: stat.ino,\n              mode: stat.mode,\n              nlink: stat.nlink,\n              uid: stat.uid,\n              gid: stat.gid,\n              rdev: stat.rdev,\n              size: stat.size,\n              atime: stat.atime,\n              mtime: stat.mtime,\n              ctime: stat.ctime,\n              blksize: stat.blksize,\n              blocks: stat.blocks\n            };\n          },\n          setattr: function(node, attr) {\n            var path2 = NODEFS.realPath(node);\n            try {\n              if (attr.mode !== void 0) {\n                fs.chmodSync(path2, attr.mode);\n                node.mode = attr.mode;\n              }\n              if (attr.timestamp !== void 0) {\n                var date = new Date(attr.timestamp);\n                fs.utimesSync(path2, date, date);\n              }\n              if (attr.size !== void 0) {\n                fs.truncateSync(path2, attr.size);\n              }\n            } catch (e) {\n              if (!e.code)\n                throw e;\n              throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n            }\n          },\n          lookup: function(parent, name) {\n            var path2 = PATH.join2(NODEFS.realPath(parent), name);\n            var mode = NODEFS.getMode(path2);\n            return NODEFS.createNode(parent, name, mode);\n          },\n          mknod: function(parent, name, mode, dev) {\n            var node = NODEFS.createNode(parent, name, mode, dev);\n            var path2 = NODEFS.realPath(node);\n            try {\n              if (FS.isDir(node.mode)) {\n                fs.mkdirSync(path2, node.mode);\n              } else {\n                fs.writeFileSync(path2, \"\", { mode: node.mode });\n              }\n            } catch (e) {\n              if (!e.code)\n                throw e;\n              throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n            }\n            return node;\n          },\n          rename: function(oldNode, newDir, newName) {\n            var oldPath = NODEFS.realPath(oldNode);\n            var newPath = PATH.join2(NODEFS.realPath(newDir), newName);\n            try {\n              fs.renameSync(oldPath, newPath);\n            } catch (e) {\n              if (!e.code)\n                throw e;\n              throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n            }\n          },\n          unlink: function(parent, name) {\n            var path2 = PATH.join2(NODEFS.realPath(parent), name);\n            try {\n              fs.unlinkSync(path2);\n            } catch (e) {\n              if (!e.code)\n                throw e;\n              throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n            }\n          },\n          rmdir: function(parent, name) {\n            var path2 = PATH.join2(NODEFS.realPath(parent), name);\n            try {\n              fs.rmdirSync(path2);\n            } catch (e) {\n              if (!e.code)\n                throw e;\n              throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n            }\n          },\n          readdir: function(node) {\n            var path2 = NODEFS.realPath(node);\n            try {\n              return fs.readdirSync(path2);\n            } catch (e) {\n              if (!e.code)\n                throw e;\n              throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n            }\n          },\n          symlink: function(parent, newName, oldPath) {\n            var newPath = PATH.join2(NODEFS.realPath(parent), newName);\n            try {\n              fs.symlinkSync(oldPath, newPath);\n            } catch (e) {\n              if (!e.code)\n                throw e;\n              throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n            }\n          },\n          readlink: function(node) {\n            var path2 = NODEFS.realPath(node);\n            try {\n              path2 = fs.readlinkSync(path2);\n              path2 = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path2);\n              return path2;\n            } catch (e) {\n              if (!e.code)\n                throw e;\n              throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n            }\n          }\n        },\n        stream_ops: {\n          open: function(stream) {\n            var path2 = NODEFS.realPath(stream.node);\n            try {\n              if (FS.isFile(stream.node.mode)) {\n                stream.nfd = fs.openSync(path2, NODEFS.flagsForNode(stream.flags));\n              }\n            } catch (e) {\n              if (!e.code)\n                throw e;\n              throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n            }\n          },\n          close: function(stream) {\n            try {\n              if (FS.isFile(stream.node.mode) && stream.nfd) {\n                fs.closeSync(stream.nfd);\n              }\n            } catch (e) {\n              if (!e.code)\n                throw e;\n              throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n            }\n          },\n          read: function(stream, buffer2, offset, length, position) {\n            if (length === 0)\n              return 0;\n            try {\n              return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer2.buffer), offset, length, position);\n            } catch (e) {\n              throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n            }\n          },\n          write: function(stream, buffer2, offset, length, position) {\n            try {\n              return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer2.buffer), offset, length, position);\n            } catch (e) {\n              throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n            }\n          },\n          llseek: function(stream, offset, whence) {\n            var position = offset;\n            if (whence === 1) {\n              position += stream.position;\n            } else if (whence === 2) {\n              if (FS.isFile(stream.node.mode)) {\n                try {\n                  var stat = fs.fstatSync(stream.nfd);\n                  position += stat.size;\n                } catch (e) {\n                  throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n                }\n              }\n            }\n            if (position < 0) {\n              throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n            }\n            return position;\n          }\n        }\n      };\n      var WORKERFS = {\n        DIR_MODE: 16895,\n        FILE_MODE: 33279,\n        reader: null,\n        mount: function(mount) {\n          assert(ENVIRONMENT_IS_WORKER);\n          if (!WORKERFS.reader)\n            WORKERFS.reader = new FileReaderSync();\n          var root = WORKERFS.createNode(null, \"/\", WORKERFS.DIR_MODE, 0);\n          var createdParents = {};\n          function ensureParent(path2) {\n            var parts = path2.split(\"/\");\n            var parent = root;\n            for (var i = 0; i < parts.length - 1; i++) {\n              var curr = parts.slice(0, i + 1).join(\"/\");\n              if (!createdParents[curr]) {\n                createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);\n              }\n              parent = createdParents[curr];\n            }\n            return parent;\n          }\n          function base(path2) {\n            var parts = path2.split(\"/\");\n            return parts[parts.length - 1];\n          }\n          Array.prototype.forEach.call(mount.opts[\"files\"] || [], function(file) {\n            WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);\n          });\n          (mount.opts[\"blobs\"] || []).forEach(function(obj) {\n            WORKERFS.createNode(ensureParent(obj[\"name\"]), base(obj[\"name\"]), WORKERFS.FILE_MODE, 0, obj[\"data\"]);\n          });\n          (mount.opts[\"packages\"] || []).forEach(function(pack) {\n            pack[\"metadata\"].files.forEach(function(file) {\n              var name = file.filename.substr(1);\n              WORKERFS.createNode(\n                ensureParent(name),\n                base(name),\n                WORKERFS.FILE_MODE,\n                0,\n                pack[\"blob\"].slice(file.start, file.end)\n              );\n            });\n          });\n          return root;\n        },\n        createNode: function(parent, name, mode, dev, contents, mtime) {\n          var node = FS.createNode(parent, name, mode);\n          node.mode = mode;\n          node.node_ops = WORKERFS.node_ops;\n          node.stream_ops = WORKERFS.stream_ops;\n          node.timestamp = (mtime || new Date()).getTime();\n          assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);\n          if (mode === WORKERFS.FILE_MODE) {\n            node.size = contents.size;\n            node.contents = contents;\n          } else {\n            node.size = 4096;\n            node.contents = {};\n          }\n          if (parent) {\n            parent.contents[name] = node;\n          }\n          return node;\n        },\n        node_ops: {\n          getattr: function(node) {\n            return {\n              dev: 1,\n              ino: void 0,\n              mode: node.mode,\n              nlink: 1,\n              uid: 0,\n              gid: 0,\n              rdev: void 0,\n              size: node.size,\n              atime: new Date(node.timestamp),\n              mtime: new Date(node.timestamp),\n              ctime: new Date(node.timestamp),\n              blksize: 4096,\n              blocks: Math.ceil(node.size / 4096)\n            };\n          },\n          setattr: function(node, attr) {\n            if (attr.mode !== void 0) {\n              node.mode = attr.mode;\n            }\n            if (attr.timestamp !== void 0) {\n              node.timestamp = attr.timestamp;\n            }\n          },\n          lookup: function(parent, name) {\n            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);\n          },\n          mknod: function(parent, name, mode, dev) {\n            throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n          },\n          rename: function(oldNode, newDir, newName) {\n            throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n          },\n          unlink: function(parent, name) {\n            throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n          },\n          rmdir: function(parent, name) {\n            throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n          },\n          readdir: function(node) {\n            var entries = [\".\", \"..\"];\n            for (var key2 in node.contents) {\n              if (!node.contents.hasOwnProperty(key2)) {\n                continue;\n              }\n              entries.push(key2);\n            }\n            return entries;\n          },\n          symlink: function(parent, newName, oldPath) {\n            throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n          },\n          readlink: function(node) {\n            throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n          }\n        },\n        stream_ops: {\n          read: function(stream, buffer2, offset, length, position) {\n            if (position >= stream.node.size)\n              return 0;\n            var chunk = stream.node.contents.slice(position, position + length);\n            var ab = WORKERFS.reader.readAsArrayBuffer(chunk);\n            buffer2.set(new Uint8Array(ab), offset);\n            return chunk.size;\n          },\n          write: function(stream, buffer2, offset, length, position) {\n            throw new FS.ErrnoError(ERRNO_CODES.EIO);\n          },\n          llseek: function(stream, offset, whence) {\n            var position = offset;\n            if (whence === 1) {\n              position += stream.position;\n            } else if (whence === 2) {\n              if (FS.isFile(stream.node.mode)) {\n                position += stream.node.size;\n              }\n            }\n            if (position < 0) {\n              throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n            }\n            return position;\n          }\n        }\n      };\n      STATICTOP += 16;\n      STATICTOP += 16;\n      STATICTOP += 16;\n      var FS = {\n        root: null,\n        mounts: [],\n        devices: {},\n        streams: [],\n        nextInode: 1,\n        nameTable: null,\n        currentPath: \"/\",\n        initialized: false,\n        ignorePermissions: true,\n        trackingDelegate: {},\n        tracking: { openFlags: { READ: 1, WRITE: 2 } },\n        ErrnoError: null,\n        genericErrors: {},\n        filesystems: null,\n        syncFSRequests: 0,\n        handleFSError: function(e) {\n          if (!(e instanceof FS.ErrnoError))\n            throw e + \" : \" + stackTrace();\n          return ___setErrNo(e.errno);\n        },\n        lookupPath: function(path2, opts) {\n          path2 = PATH.resolve(FS.cwd(), path2);\n          opts = opts || {};\n          if (!path2)\n            return { path: \"\", node: null };\n          var defaults = { follow_mount: true, recurse_count: 0 };\n          for (var key2 in defaults) {\n            if (opts[key2] === void 0) {\n              opts[key2] = defaults[key2];\n            }\n          }\n          if (opts.recurse_count > 8) {\n            throw new FS.ErrnoError(ERRNO_CODES.ELOOP);\n          }\n          var parts = PATH.normalizeArray(\n            path2.split(\"/\").filter(function(p) {\n              return !!p;\n            }),\n            false\n          );\n          var current = FS.root;\n          var current_path = \"/\";\n          for (var i = 0; i < parts.length; i++) {\n            var islast = i === parts.length - 1;\n            if (islast && opts.parent) {\n              break;\n            }\n            current = FS.lookupNode(current, parts[i]);\n            current_path = PATH.join2(current_path, parts[i]);\n            if (FS.isMountpoint(current)) {\n              if (!islast || islast && opts.follow_mount) {\n                current = current.mounted.root;\n              }\n            }\n            if (!islast || opts.follow) {\n              var count = 0;\n              while (FS.isLink(current.mode)) {\n                var link = FS.readlink(current_path);\n                current_path = PATH.resolve(PATH.dirname(current_path), link);\n                var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });\n                current = lookup.node;\n                if (count++ > 40) {\n                  throw new FS.ErrnoError(ERRNO_CODES.ELOOP);\n                }\n              }\n            }\n          }\n          return { path: current_path, node: current };\n        },\n        getPath: function(node) {\n          var path2;\n          while (true) {\n            if (FS.isRoot(node)) {\n              var mount = node.mount.mountpoint;\n              if (!path2)\n                return mount;\n              return mount[mount.length - 1] !== \"/\" ? mount + \"/\" + path2 : mount + path2;\n            }\n            path2 = path2 ? node.name + \"/\" + path2 : node.name;\n            node = node.parent;\n          }\n        },\n        hashName: function(parentid, name) {\n          var hash = 0;\n          for (var i = 0; i < name.length; i++) {\n            hash = (hash << 5) - hash + name.charCodeAt(i) | 0;\n          }\n          return (parentid + hash >>> 0) % FS.nameTable.length;\n        },\n        hashAddNode: function(node) {\n          var hash = FS.hashName(node.parent.id, node.name);\n          node.name_next = FS.nameTable[hash];\n          FS.nameTable[hash] = node;\n        },\n        hashRemoveNode: function(node) {\n          var hash = FS.hashName(node.parent.id, node.name);\n          if (FS.nameTable[hash] === node) {\n            FS.nameTable[hash] = node.name_next;\n          } else {\n            var current = FS.nameTable[hash];\n            while (current) {\n              if (current.name_next === node) {\n                current.name_next = node.name_next;\n                break;\n              }\n              current = current.name_next;\n            }\n          }\n        },\n        lookupNode: function(parent, name) {\n          var err2 = FS.mayLookup(parent);\n          if (err2) {\n            throw new FS.ErrnoError(err2, parent);\n          }\n          var hash = FS.hashName(parent.id, name);\n          for (var node = FS.nameTable[hash]; node; node = node.name_next) {\n            var nodeName = node.name;\n            if (node.parent.id === parent.id && nodeName === name) {\n              return node;\n            }\n          }\n          return FS.lookup(parent, name);\n        },\n        createNode: function(parent, name, mode, rdev) {\n          if (!FS.FSNode) {\n            FS.FSNode = function(parent2, name2, mode2, rdev2) {\n              if (!parent2) {\n                parent2 = this;\n              }\n              this.parent = parent2;\n              this.mount = parent2.mount;\n              this.mounted = null;\n              this.id = FS.nextInode++;\n              this.name = name2;\n              this.mode = mode2;\n              this.node_ops = {};\n              this.stream_ops = {};\n              this.rdev = rdev2;\n            };\n            FS.FSNode.prototype = {};\n            var readMode = 292 | 73;\n            var writeMode = 146;\n            Object.defineProperties(FS.FSNode.prototype, {\n              read: {\n                get: function() {\n                  return (this.mode & readMode) === readMode;\n                },\n                set: function(val) {\n                  val ? this.mode |= readMode : this.mode &= ~readMode;\n                }\n              },\n              write: {\n                get: function() {\n                  return (this.mode & writeMode) === writeMode;\n                },\n                set: function(val) {\n                  val ? this.mode |= writeMode : this.mode &= ~writeMode;\n                }\n              },\n              isFolder: {\n                get: function() {\n                  return FS.isDir(this.mode);\n                }\n              },\n              isDevice: {\n                get: function() {\n                  return FS.isChrdev(this.mode);\n                }\n              }\n            });\n          }\n          var node = new FS.FSNode(parent, name, mode, rdev);\n          FS.hashAddNode(node);\n          return node;\n        },\n        destroyNode: function(node) {\n          FS.hashRemoveNode(node);\n        },\n        isRoot: function(node) {\n          return node === node.parent;\n        },\n        isMountpoint: function(node) {\n          return !!node.mounted;\n        },\n        isFile: function(mode) {\n          return (mode & 61440) === 32768;\n        },\n        isDir: function(mode) {\n          return (mode & 61440) === 16384;\n        },\n        isLink: function(mode) {\n          return (mode & 61440) === 40960;\n        },\n        isChrdev: function(mode) {\n          return (mode & 61440) === 8192;\n        },\n        isBlkdev: function(mode) {\n          return (mode & 61440) === 24576;\n        },\n        isFIFO: function(mode) {\n          return (mode & 61440) === 4096;\n        },\n        isSocket: function(mode) {\n          return (mode & 49152) === 49152;\n        },\n        flagModes: {\n          r: 0,\n          rs: 1052672,\n          \"r+\": 2,\n          w: 577,\n          wx: 705,\n          xw: 705,\n          \"w+\": 578,\n          \"wx+\": 706,\n          \"xw+\": 706,\n          a: 1089,\n          ax: 1217,\n          xa: 1217,\n          \"a+\": 1090,\n          \"ax+\": 1218,\n          \"xa+\": 1218\n        },\n        modeStringToFlags: function(str) {\n          var flags = FS.flagModes[str];\n          if (typeof flags === \"undefined\") {\n            throw new Error(\"Unknown file open mode: \" + str);\n          }\n          return flags;\n        },\n        flagsToPermissionString: function(flag) {\n          var perms = [\"r\", \"w\", \"rw\"][flag & 3];\n          if (flag & 512) {\n            perms += \"w\";\n          }\n          return perms;\n        },\n        nodePermissions: function(node, perms) {\n          if (FS.ignorePermissions) {\n            return 0;\n          }\n          if (perms.indexOf(\"r\") !== -1 && !(node.mode & 292)) {\n            return ERRNO_CODES.EACCES;\n          } else if (perms.indexOf(\"w\") !== -1 && !(node.mode & 146)) {\n            return ERRNO_CODES.EACCES;\n          } else if (perms.indexOf(\"x\") !== -1 && !(node.mode & 73)) {\n            return ERRNO_CODES.EACCES;\n          }\n          return 0;\n        },\n        mayLookup: function(dir) {\n          var err2 = FS.nodePermissions(dir, \"x\");\n          if (err2)\n            return err2;\n          if (!dir.node_ops.lookup)\n            return ERRNO_CODES.EACCES;\n          return 0;\n        },\n        mayCreate: function(dir, name) {\n          try {\n            var node = FS.lookupNode(dir, name);\n            return ERRNO_CODES.EEXIST;\n          } catch (e) {\n          }\n          return FS.nodePermissions(dir, \"wx\");\n        },\n        mayDelete: function(dir, name, isdir) {\n          var node;\n          try {\n            node = FS.lookupNode(dir, name);\n          } catch (e) {\n            return e.errno;\n          }\n          var err2 = FS.nodePermissions(dir, \"wx\");\n          if (err2) {\n            return err2;\n          }\n          if (isdir) {\n            if (!FS.isDir(node.mode)) {\n              return ERRNO_CODES.ENOTDIR;\n            }\n            if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {\n              return ERRNO_CODES.EBUSY;\n            }\n          } else {\n            if (FS.isDir(node.mode)) {\n              return ERRNO_CODES.EISDIR;\n            }\n          }\n          return 0;\n        },\n        mayOpen: function(node, flags) {\n          if (!node) {\n            return ERRNO_CODES.ENOENT;\n          }\n          if (FS.isLink(node.mode)) {\n            return ERRNO_CODES.ELOOP;\n          } else if (FS.isDir(node.mode)) {\n            if (FS.flagsToPermissionString(flags) !== \"r\" || flags & 512) {\n              return ERRNO_CODES.EISDIR;\n            }\n          }\n          return FS.nodePermissions(node, FS.flagsToPermissionString(flags));\n        },\n        MAX_OPEN_FDS: 4096,\n        nextfd: function(fd_start, fd_end) {\n          fd_start = fd_start || 0;\n          fd_end = fd_end || FS.MAX_OPEN_FDS;\n          for (var fd = fd_start; fd <= fd_end; fd++) {\n            if (!FS.streams[fd]) {\n              return fd;\n            }\n          }\n          throw new FS.ErrnoError(ERRNO_CODES.EMFILE);\n        },\n        getStream: function(fd) {\n          return FS.streams[fd];\n        },\n        createStream: function(stream, fd_start, fd_end) {\n          if (!FS.FSStream) {\n            FS.FSStream = function() {\n            };\n            FS.FSStream.prototype = {};\n            Object.defineProperties(FS.FSStream.prototype, {\n              object: {\n                get: function() {\n                  return this.node;\n                },\n                set: function(val) {\n                  this.node = val;\n                }\n              },\n              isRead: {\n                get: function() {\n                  return (this.flags & 2097155) !== 1;\n                }\n              },\n              isWrite: {\n                get: function() {\n                  return (this.flags & 2097155) !== 0;\n                }\n              },\n              isAppend: {\n                get: function() {\n                  return this.flags & 1024;\n                }\n              }\n            });\n          }\n          var newStream = new FS.FSStream();\n          for (var p in stream) {\n            newStream[p] = stream[p];\n          }\n          stream = newStream;\n          var fd = FS.nextfd(fd_start, fd_end);\n          stream.fd = fd;\n          FS.streams[fd] = stream;\n          return stream;\n        },\n        closeStream: function(fd) {\n          FS.streams[fd] = null;\n        },\n        chrdev_stream_ops: {\n          open: function(stream) {\n            var device = FS.getDevice(stream.node.rdev);\n            stream.stream_ops = device.stream_ops;\n            if (stream.stream_ops.open) {\n              stream.stream_ops.open(stream);\n            }\n          },\n          llseek: function() {\n            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);\n          }\n        },\n        major: function(dev) {\n          return dev >> 8;\n        },\n        minor: function(dev) {\n          return dev & 255;\n        },\n        makedev: function(ma, mi) {\n          return ma << 8 | mi;\n        },\n        registerDevice: function(dev, ops) {\n          FS.devices[dev] = { stream_ops: ops };\n        },\n        getDevice: function(dev) {\n          return FS.devices[dev];\n        },\n        getMounts: function(mount) {\n          var mounts = [];\n          var check = [mount];\n          while (check.length) {\n            var m = check.pop();\n            mounts.push(m);\n            check.push.apply(check, m.mounts);\n          }\n          return mounts;\n        },\n        syncfs: function(populate, callback) {\n          if (typeof populate === \"function\") {\n            callback = populate;\n            populate = false;\n          }\n          FS.syncFSRequests++;\n          if (FS.syncFSRequests > 1) {\n            console.log(\n              \"warning: \" + FS.syncFSRequests + \" FS.syncfs operations in flight at once, probably just doing extra work\"\n            );\n          }\n          var mounts = FS.getMounts(FS.root.mount);\n          var completed = 0;\n          function doCallback(err2) {\n            assert(FS.syncFSRequests > 0);\n            FS.syncFSRequests--;\n            return callback(err2);\n          }\n          function done(err2) {\n            if (err2) {\n              if (!done.errored) {\n                done.errored = true;\n                return doCallback(err2);\n              }\n              return;\n            }\n            if (++completed >= mounts.length) {\n              doCallback(null);\n            }\n          }\n          mounts.forEach(function(mount) {\n            if (!mount.type.syncfs) {\n              return done(null);\n            }\n            mount.type.syncfs(mount, populate, done);\n          });\n        },\n        mount: function(type, opts, mountpoint) {\n          var root = mountpoint === \"/\";\n          var pseudo = !mountpoint;\n          var node;\n          if (root && FS.root) {\n            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);\n          } else if (!root && !pseudo) {\n            var lookup = FS.lookupPath(mountpoint, { follow_mount: false });\n            mountpoint = lookup.path;\n            node = lookup.node;\n            if (FS.isMountpoint(node)) {\n              throw new FS.ErrnoError(ERRNO_CODES.EBUSY);\n            }\n            if (!FS.isDir(node.mode)) {\n              throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);\n            }\n          }\n          var mount = { type, opts, mountpoint, mounts: [] };\n          var mountRoot = type.mount(mount);\n          mountRoot.mount = mount;\n          mount.root = mountRoot;\n          if (root) {\n            FS.root = mountRoot;\n          } else if (node) {\n            node.mounted = mount;\n            if (node.mount) {\n              node.mount.mounts.push(mount);\n            }\n          }\n          return mountRoot;\n        },\n        unmount: function(mountpoint) {\n          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });\n          if (!FS.isMountpoint(lookup.node)) {\n            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n          }\n          var node = lookup.node;\n          var mount = node.mounted;\n          var mounts = FS.getMounts(mount);\n          Object.keys(FS.nameTable).forEach(function(hash) {\n            var current = FS.nameTable[hash];\n            while (current) {\n              var next = current.name_next;\n              if (mounts.indexOf(current.mount) !== -1) {\n                FS.destroyNode(current);\n              }\n              current = next;\n            }\n          });\n          node.mounted = null;\n          var idx = node.mount.mounts.indexOf(mount);\n          assert(idx !== -1);\n          node.mount.mounts.splice(idx, 1);\n        },\n        lookup: function(parent, name) {\n          return parent.node_ops.lookup(parent, name);\n        },\n        mknod: function(path2, mode, dev) {\n          var lookup = FS.lookupPath(path2, { parent: true });\n          var parent = lookup.node;\n          var name = PATH.basename(path2);\n          if (!name || name === \".\" || name === \"..\") {\n            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n          }\n          var err2 = FS.mayCreate(parent, name);\n          if (err2) {\n            throw new FS.ErrnoError(err2);\n          }\n          if (!parent.node_ops.mknod) {\n            throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n          }\n          return parent.node_ops.mknod(parent, name, mode, dev);\n        },\n        create: function(path2, mode) {\n          mode = mode !== void 0 ? mode : 438;\n          mode &= 4095;\n          mode |= 32768;\n          return FS.mknod(path2, mode, 0);\n        },\n        mkdir: function(path2, mode) {\n          mode = mode !== void 0 ? mode : 511;\n          mode &= 511 | 512;\n          mode |= 16384;\n          return FS.mknod(path2, mode, 0);\n        },\n        mkdirTree: function(path2, mode) {\n          var dirs = path2.split(\"/\");\n          var d = \"\";\n          for (var i = 0; i < dirs.length; ++i) {\n            if (!dirs[i])\n              continue;\n            d += \"/\" + dirs[i];\n            try {\n              FS.mkdir(d, mode);\n            } catch (e) {\n              if (e.errno != ERRNO_CODES.EEXIST)\n                throw e;\n            }\n          }\n        },\n        mkdev: function(path2, mode, dev) {\n          if (typeof dev === \"undefined\") {\n            dev = mode;\n            mode = 438;\n          }\n          mode |= 8192;\n          return FS.mknod(path2, mode, dev);\n        },\n        symlink: function(oldpath, newpath) {\n          if (!PATH.resolve(oldpath)) {\n            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);\n          }\n          var lookup = FS.lookupPath(newpath, { parent: true });\n          var parent = lookup.node;\n          if (!parent) {\n            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);\n          }\n          var newname = PATH.basename(newpath);\n          var err2 = FS.mayCreate(parent, newname);\n          if (err2) {\n            throw new FS.ErrnoError(err2);\n          }\n          if (!parent.node_ops.symlink) {\n            throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n          }\n          return parent.node_ops.symlink(parent, newname, oldpath);\n        },\n        rename: function(old_path, new_path) {\n          var old_dirname = PATH.dirname(old_path);\n          var new_dirname = PATH.dirname(new_path);\n          var old_name = PATH.basename(old_path);\n          var new_name = PATH.basename(new_path);\n          var lookup, old_dir, new_dir;\n          try {\n            lookup = FS.lookupPath(old_path, { parent: true });\n            old_dir = lookup.node;\n            lookup = FS.lookupPath(new_path, { parent: true });\n            new_dir = lookup.node;\n          } catch (e) {\n            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);\n          }\n          if (!old_dir || !new_dir)\n            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);\n          if (old_dir.mount !== new_dir.mount) {\n            throw new FS.ErrnoError(ERRNO_CODES.EXDEV);\n          }\n          var old_node = FS.lookupNode(old_dir, old_name);\n          var relative = PATH.relative(old_path, new_dirname);\n          if (relative.charAt(0) !== \".\") {\n            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n          }\n          relative = PATH.relative(new_path, old_dirname);\n          if (relative.charAt(0) !== \".\") {\n            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);\n          }\n          var new_node;\n          try {\n            new_node = FS.lookupNode(new_dir, new_name);\n          } catch (e) {\n          }\n          if (old_node === new_node) {\n            return;\n          }\n          var isdir = FS.isDir(old_node.mode);\n          var err2 = FS.mayDelete(old_dir, old_name, isdir);\n          if (err2) {\n            throw new FS.ErrnoError(err2);\n          }\n          err2 = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);\n          if (err2) {\n            throw new FS.ErrnoError(err2);\n          }\n          if (!old_dir.node_ops.rename) {\n            throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n          }\n          if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {\n            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);\n          }\n          if (new_dir !== old_dir) {\n            err2 = FS.nodePermissions(old_dir, \"w\");\n            if (err2) {\n              throw new FS.ErrnoError(err2);\n            }\n          }\n          try {\n            if (FS.trackingDelegate[\"willMovePath\"]) {\n              FS.trackingDelegate[\"willMovePath\"](old_path, new_path);\n            }\n          } catch (e) {\n            console.log(\n              \"FS.trackingDelegate['willMovePath']('\" + old_path + \"', '\" + new_path + \"') threw an exception: \" + e.message\n            );\n          }\n          FS.hashRemoveNode(old_node);\n          try {\n            old_dir.node_ops.rename(old_node, new_dir, new_name);\n          } catch (e) {\n            throw e;\n          } finally {\n            FS.hashAddNode(old_node);\n          }\n          try {\n            if (FS.trackingDelegate[\"onMovePath\"])\n              FS.trackingDelegate[\"onMovePath\"](old_path, new_path);\n          } catch (e) {\n            console.log(\n              \"FS.trackingDelegate['onMovePath']('\" + old_path + \"', '\" + new_path + \"') threw an exception: \" + e.message\n            );\n          }\n        },\n        rmdir: function(path2) {\n          var lookup = FS.lookupPath(path2, { parent: true });\n          var parent = lookup.node;\n          var name = PATH.basename(path2);\n          var node = FS.lookupNode(parent, name);\n          var err2 = FS.mayDelete(parent, name, true);\n          if (err2) {\n            throw new FS.ErrnoError(err2);\n          }\n          if (!parent.node_ops.rmdir) {\n            throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n          }\n          if (FS.isMountpoint(node)) {\n            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);\n          }\n          try {\n            if (FS.trackingDelegate[\"willDeletePath\"]) {\n              FS.trackingDelegate[\"willDeletePath\"](path2);\n            }\n          } catch (e) {\n            console.log(\"FS.trackingDelegate['willDeletePath']('\" + path2 + \"') threw an exception: \" + e.message);\n          }\n          parent.node_ops.rmdir(parent, name);\n          FS.destroyNode(node);\n          try {\n            if (FS.trackingDelegate[\"onDeletePath\"])\n              FS.trackingDelegate[\"onDeletePath\"](path2);\n          } catch (e) {\n            console.log(\"FS.trackingDelegate['onDeletePath']('\" + path2 + \"') threw an exception: \" + e.message);\n          }\n        },\n        readdir: function(path2) {\n          var lookup = FS.lookupPath(path2, { follow: true });\n          var node = lookup.node;\n          if (!node.node_ops.readdir) {\n            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);\n          }\n          return node.node_ops.readdir(node);\n        },\n        unlink: function(path2) {\n          var lookup = FS.lookupPath(path2, { parent: true });\n          var parent = lookup.node;\n          var name = PATH.basename(path2);\n          var node = FS.lookupNode(parent, name);\n          var err2 = FS.mayDelete(parent, name, false);\n          if (err2) {\n            throw new FS.ErrnoError(err2);\n          }\n          if (!parent.node_ops.unlink) {\n            throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n          }\n          if (FS.isMountpoint(node)) {\n            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);\n          }\n          try {\n            if (FS.trackingDelegate[\"willDeletePath\"]) {\n              FS.trackingDelegate[\"willDeletePath\"](path2);\n            }\n          } catch (e) {\n            console.log(\"FS.trackingDelegate['willDeletePath']('\" + path2 + \"') threw an exception: \" + e.message);\n          }\n          parent.node_ops.unlink(parent, name);\n          FS.destroyNode(node);\n          try {\n            if (FS.trackingDelegate[\"onDeletePath\"])\n              FS.trackingDelegate[\"onDeletePath\"](path2);\n          } catch (e) {\n            console.log(\"FS.trackingDelegate['onDeletePath']('\" + path2 + \"') threw an exception: \" + e.message);\n          }\n        },\n        readlink: function(path2) {\n          var lookup = FS.lookupPath(path2);\n          var link = lookup.node;\n          if (!link) {\n            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);\n          }\n          if (!link.node_ops.readlink) {\n            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n          }\n          return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));\n        },\n        stat: function(path2, dontFollow) {\n          var lookup = FS.lookupPath(path2, { follow: !dontFollow });\n          var node = lookup.node;\n          if (!node) {\n            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);\n          }\n          if (!node.node_ops.getattr) {\n            throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n          }\n          return node.node_ops.getattr(node);\n        },\n        lstat: function(path2) {\n          return FS.stat(path2, true);\n        },\n        chmod: function(path2, mode, dontFollow) {\n          var node;\n          if (typeof path2 === \"string\") {\n            var lookup = FS.lookupPath(path2, { follow: !dontFollow });\n            node = lookup.node;\n          } else {\n            node = path2;\n          }\n          if (!node.node_ops.setattr) {\n            throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n          }\n          node.node_ops.setattr(node, { mode: mode & 4095 | node.mode & ~4095, timestamp: Date.now() });\n        },\n        lchmod: function(path2, mode) {\n          FS.chmod(path2, mode, true);\n        },\n        fchmod: function(fd, mode) {\n          var stream = FS.getStream(fd);\n          if (!stream) {\n            throw new FS.ErrnoError(ERRNO_CODES.EBADF);\n          }\n          FS.chmod(stream.node, mode);\n        },\n        chown: function(path2, uid, gid, dontFollow) {\n          var node;\n          if (typeof path2 === \"string\") {\n            var lookup = FS.lookupPath(path2, { follow: !dontFollow });\n            node = lookup.node;\n          } else {\n            node = path2;\n          }\n          if (!node.node_ops.setattr) {\n            throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n          }\n          node.node_ops.setattr(node, { timestamp: Date.now() });\n        },\n        lchown: function(path2, uid, gid) {\n          FS.chown(path2, uid, gid, true);\n        },\n        fchown: function(fd, uid, gid) {\n          var stream = FS.getStream(fd);\n          if (!stream) {\n            throw new FS.ErrnoError(ERRNO_CODES.EBADF);\n          }\n          FS.chown(stream.node, uid, gid);\n        },\n        truncate: function(path2, len) {\n          if (len < 0) {\n            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n          }\n          var node;\n          if (typeof path2 === \"string\") {\n            var lookup = FS.lookupPath(path2, { follow: true });\n            node = lookup.node;\n          } else {\n            node = path2;\n          }\n          if (!node.node_ops.setattr) {\n            throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n          }\n          if (FS.isDir(node.mode)) {\n            throw new FS.ErrnoError(ERRNO_CODES.EISDIR);\n          }\n          if (!FS.isFile(node.mode)) {\n            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n          }\n          var err2 = FS.nodePermissions(node, \"w\");\n          if (err2) {\n            throw new FS.ErrnoError(err2);\n          }\n          node.node_ops.setattr(node, { size: len, timestamp: Date.now() });\n        },\n        ftruncate: function(fd, len) {\n          var stream = FS.getStream(fd);\n          if (!stream) {\n            throw new FS.ErrnoError(ERRNO_CODES.EBADF);\n          }\n          if ((stream.flags & 2097155) === 0) {\n            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n          }\n          FS.truncate(stream.node, len);\n        },\n        utime: function(path2, atime, mtime) {\n          var lookup = FS.lookupPath(path2, { follow: true });\n          var node = lookup.node;\n          node.node_ops.setattr(node, { timestamp: Math.max(atime, mtime) });\n        },\n        open: function(path2, flags, mode, fd_start, fd_end) {\n          if (path2 === \"\") {\n            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);\n          }\n          flags = typeof flags === \"string\" ? FS.modeStringToFlags(flags) : flags;\n          mode = typeof mode === \"undefined\" ? 438 : mode;\n          if (flags & 64) {\n            mode = mode & 4095 | 32768;\n          } else {\n            mode = 0;\n          }\n          var node;\n          if (typeof path2 === \"object\") {\n            node = path2;\n          } else {\n            path2 = PATH.normalize(path2);\n            try {\n              var lookup = FS.lookupPath(path2, { follow: !(flags & 131072) });\n              node = lookup.node;\n            } catch (e) {\n            }\n          }\n          var created = false;\n          if (flags & 64) {\n            if (node) {\n              if (flags & 128) {\n                throw new FS.ErrnoError(ERRNO_CODES.EEXIST);\n              }\n            } else {\n              node = FS.mknod(path2, mode, 0);\n              created = true;\n            }\n          }\n          if (!node) {\n            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);\n          }\n          if (FS.isChrdev(node.mode)) {\n            flags &= ~512;\n          }\n          if (flags & 65536 && !FS.isDir(node.mode)) {\n            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);\n          }\n          if (!created) {\n            var err2 = FS.mayOpen(node, flags);\n            if (err2) {\n              throw new FS.ErrnoError(err2);\n            }\n          }\n          if (flags & 512) {\n            FS.truncate(node, 0);\n          }\n          flags &= ~(128 | 512);\n          var stream = FS.createStream(\n            {\n              node,\n              path: FS.getPath(node),\n              flags,\n              seekable: true,\n              position: 0,\n              stream_ops: node.stream_ops,\n              ungotten: [],\n              error: false\n            },\n            fd_start,\n            fd_end\n          );\n          if (stream.stream_ops.open) {\n            stream.stream_ops.open(stream);\n          }\n          if (Module[\"logReadFiles\"] && !(flags & 1)) {\n            if (!FS.readFiles)\n              FS.readFiles = {};\n            if (!(path2 in FS.readFiles)) {\n              FS.readFiles[path2] = 1;\n              err2(\"read file: \" + path2);\n            }\n          }\n          try {\n            if (FS.trackingDelegate[\"onOpenFile\"]) {\n              var trackingFlags = 0;\n              if ((flags & 2097155) !== 1) {\n                trackingFlags |= FS.tracking.openFlags.READ;\n              }\n              if ((flags & 2097155) !== 0) {\n                trackingFlags |= FS.tracking.openFlags.WRITE;\n              }\n              FS.trackingDelegate[\"onOpenFile\"](path2, trackingFlags);\n            }\n          } catch (e) {\n            console.log(\"FS.trackingDelegate['onOpenFile']('\" + path2 + \"', flags) threw an exception: \" + e.message);\n          }\n          return stream;\n        },\n        close: function(stream) {\n          if (FS.isClosed(stream)) {\n            throw new FS.ErrnoError(ERRNO_CODES.EBADF);\n          }\n          if (stream.getdents)\n            stream.getdents = null;\n          try {\n            if (stream.stream_ops.close) {\n              stream.stream_ops.close(stream);\n            }\n          } catch (e) {\n            throw e;\n          } finally {\n            FS.closeStream(stream.fd);\n          }\n          stream.fd = null;\n        },\n        isClosed: function(stream) {\n          return stream.fd === null;\n        },\n        llseek: function(stream, offset, whence) {\n          if (FS.isClosed(stream)) {\n            throw new FS.ErrnoError(ERRNO_CODES.EBADF);\n          }\n          if (!stream.seekable || !stream.stream_ops.llseek) {\n            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);\n          }\n          stream.position = stream.stream_ops.llseek(stream, offset, whence);\n          stream.ungotten = [];\n          return stream.position;\n        },\n        read: function(stream, buffer2, offset, length, position) {\n          if (length < 0 || position < 0) {\n            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n          }\n          if (FS.isClosed(stream)) {\n            throw new FS.ErrnoError(ERRNO_CODES.EBADF);\n          }\n          if ((stream.flags & 2097155) === 1) {\n            throw new FS.ErrnoError(ERRNO_CODES.EBADF);\n          }\n          if (FS.isDir(stream.node.mode)) {\n            throw new FS.ErrnoError(ERRNO_CODES.EISDIR);\n          }\n          if (!stream.stream_ops.read) {\n            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n          }\n          var seeking = typeof position !== \"undefined\";\n          if (!seeking) {\n            position = stream.position;\n          } else if (!stream.seekable) {\n            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);\n          }\n          var bytesRead = stream.stream_ops.read(stream, buffer2, offset, length, position);\n          if (!seeking)\n            stream.position += bytesRead;\n          return bytesRead;\n        },\n        write: function(stream, buffer2, offset, length, position, canOwn) {\n          if (length < 0 || position < 0) {\n            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n          }\n          if (FS.isClosed(stream)) {\n            throw new FS.ErrnoError(ERRNO_CODES.EBADF);\n          }\n          if ((stream.flags & 2097155) === 0) {\n            throw new FS.ErrnoError(ERRNO_CODES.EBADF);\n          }\n          if (FS.isDir(stream.node.mode)) {\n            throw new FS.ErrnoError(ERRNO_CODES.EISDIR);\n          }\n          if (!stream.stream_ops.write) {\n            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n          }\n          if (stream.flags & 1024) {\n            FS.llseek(stream, 0, 2);\n          }\n          var seeking = typeof position !== \"undefined\";\n          if (!seeking) {\n            position = stream.position;\n          } else if (!stream.seekable) {\n            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);\n          }\n          var bytesWritten = stream.stream_ops.write(stream, buffer2, offset, length, position, canOwn);\n          if (!seeking)\n            stream.position += bytesWritten;\n          try {\n            if (stream.path && FS.trackingDelegate[\"onWriteToFile\"])\n              FS.trackingDelegate[\"onWriteToFile\"](stream.path);\n          } catch (e) {\n            console.log(\"FS.trackingDelegate['onWriteToFile']('\" + path + \"') threw an exception: \" + e.message);\n          }\n          return bytesWritten;\n        },\n        allocate: function(stream, offset, length) {\n          if (FS.isClosed(stream)) {\n            throw new FS.ErrnoError(ERRNO_CODES.EBADF);\n          }\n          if (offset < 0 || length <= 0) {\n            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n          }\n          if ((stream.flags & 2097155) === 0) {\n            throw new FS.ErrnoError(ERRNO_CODES.EBADF);\n          }\n          if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {\n            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);\n          }\n          if (!stream.stream_ops.allocate) {\n            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);\n          }\n          stream.stream_ops.allocate(stream, offset, length);\n        },\n        mmap: function(stream, buffer2, offset, length, position, prot, flags) {\n          if ((stream.flags & 2097155) === 1) {\n            throw new FS.ErrnoError(ERRNO_CODES.EACCES);\n          }\n          if (!stream.stream_ops.mmap) {\n            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);\n          }\n          return stream.stream_ops.mmap(stream, buffer2, offset, length, position, prot, flags);\n        },\n        msync: function(stream, buffer2, offset, length, mmapFlags) {\n          if (!stream || !stream.stream_ops.msync) {\n            return 0;\n          }\n          return stream.stream_ops.msync(stream, buffer2, offset, length, mmapFlags);\n        },\n        munmap: function(stream) {\n          return 0;\n        },\n        ioctl: function(stream, cmd, arg) {\n          if (!stream.stream_ops.ioctl) {\n            throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);\n          }\n          return stream.stream_ops.ioctl(stream, cmd, arg);\n        },\n        readFile: function(path2, opts) {\n          opts = opts || {};\n          opts.flags = opts.flags || \"r\";\n          opts.encoding = opts.encoding || \"binary\";\n          if (opts.encoding !== \"utf8\" && opts.encoding !== \"binary\") {\n            throw new Error('Invalid encoding type \"' + opts.encoding + '\"');\n          }\n          var ret;\n          var stream = FS.open(path2, opts.flags);\n          var stat = FS.stat(path2);\n          var length = stat.size;\n          var buf = new Uint8Array(length);\n          FS.read(stream, buf, 0, length, 0);\n          if (opts.encoding === \"utf8\") {\n            ret = UTF8ArrayToString(buf, 0);\n          } else if (opts.encoding === \"binary\") {\n            ret = buf;\n          }\n          FS.close(stream);\n          return ret;\n        },\n        writeFile: function(path2, data, opts) {\n          opts = opts || {};\n          opts.flags = opts.flags || \"w\";\n          var stream = FS.open(path2, opts.flags, opts.mode);\n          if (typeof data === \"string\") {\n            var buf = new Uint8Array(lengthBytesUTF8(data) + 1);\n            var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);\n            FS.write(stream, buf, 0, actualNumBytes, void 0, opts.canOwn);\n          } else if (ArrayBuffer.isView(data)) {\n            FS.write(stream, data, 0, data.byteLength, void 0, opts.canOwn);\n          } else {\n            throw new Error(\"Unsupported data type\");\n          }\n          FS.close(stream);\n        },\n        cwd: function() {\n          return FS.currentPath;\n        },\n        chdir: function(path2) {\n          var lookup = FS.lookupPath(path2, { follow: true });\n          if (lookup.node === null) {\n            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);\n          }\n          if (!FS.isDir(lookup.node.mode)) {\n            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);\n          }\n          var err2 = FS.nodePermissions(lookup.node, \"x\");\n          if (err2) {\n            throw new FS.ErrnoError(err2);\n          }\n          FS.currentPath = lookup.path;\n        },\n        createDefaultDirectories: function() {\n          FS.mkdir(\"/tmp\");\n          FS.mkdir(\"/home\");\n          FS.mkdir(\"/home/web_user\");\n        },\n        createDefaultDevices: function() {\n          FS.mkdir(\"/dev\");\n          FS.registerDevice(FS.makedev(1, 3), {\n            read: function() {\n              return 0;\n            },\n            write: function(stream, buffer2, offset, length, pos) {\n              return length;\n            }\n          });\n          FS.mkdev(\"/dev/null\", FS.makedev(1, 3));\n          TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);\n          TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);\n          FS.mkdev(\"/dev/tty\", FS.makedev(5, 0));\n          FS.mkdev(\"/dev/tty1\", FS.makedev(6, 0));\n          var random_device;\n          if (typeof crypto !== \"undefined\") {\n            var randomBuffer = new Uint8Array(1);\n            random_device = function() {\n              crypto.getRandomValues(randomBuffer);\n              return randomBuffer[0];\n            };\n          } else {\n            random_device = function() {\n              return Math.random() * 256 | 0;\n            };\n          }\n          FS.createDevice(\"/dev\", \"random\", random_device);\n          FS.createDevice(\"/dev\", \"urandom\", random_device);\n          FS.mkdir(\"/dev/shm\");\n          FS.mkdir(\"/dev/shm/tmp\");\n        },\n        createSpecialDirectories: function() {\n          FS.mkdir(\"/proc\");\n          FS.mkdir(\"/proc/self\");\n          FS.mkdir(\"/proc/self/fd\");\n          FS.mount(\n            {\n              mount: function() {\n                var node = FS.createNode(\"/proc/self\", \"fd\", 16384 | 511, 73);\n                node.node_ops = {\n                  lookup: function(parent, name) {\n                    var fd = +name;\n                    var stream = FS.getStream(fd);\n                    if (!stream)\n                      throw new FS.ErrnoError(ERRNO_CODES.EBADF);\n                    var ret = {\n                      parent: null,\n                      mount: { mountpoint: \"fake\" },\n                      node_ops: {\n                        readlink: function() {\n                          return stream.path;\n                        }\n                      }\n                    };\n                    ret.parent = ret;\n                    return ret;\n                  }\n                };\n                return node;\n              }\n            },\n            {},\n            \"/proc/self/fd\"\n          );\n        },\n        createStandardStreams: function() {\n          if (Module[\"stdin\"]) {\n            FS.createDevice(\"/dev\", \"stdin\", Module[\"stdin\"]);\n          } else {\n            FS.symlink(\"/dev/tty\", \"/dev/stdin\");\n          }\n          if (Module[\"stdout\"]) {\n            FS.createDevice(\"/dev\", \"stdout\", null, Module[\"stdout\"]);\n          } else {\n            FS.symlink(\"/dev/tty\", \"/dev/stdout\");\n          }\n          if (Module[\"stderr\"]) {\n            FS.createDevice(\"/dev\", \"stderr\", null, Module[\"stderr\"]);\n          } else {\n            FS.symlink(\"/dev/tty1\", \"/dev/stderr\");\n          }\n          var stdin = FS.open(\"/dev/stdin\", \"r\");\n          assert(stdin.fd === 0, \"invalid handle for stdin (\" + stdin.fd + \")\");\n          var stdout = FS.open(\"/dev/stdout\", \"w\");\n          assert(stdout.fd === 1, \"invalid handle for stdout (\" + stdout.fd + \")\");\n          var stderr = FS.open(\"/dev/stderr\", \"w\");\n          assert(stderr.fd === 2, \"invalid handle for stderr (\" + stderr.fd + \")\");\n        },\n        ensureErrnoError: function() {\n          if (FS.ErrnoError)\n            return;\n          FS.ErrnoError = function ErrnoError(errno, node) {\n            this.node = node;\n            this.setErrno = function(errno2) {\n              this.errno = errno2;\n              for (var key2 in ERRNO_CODES) {\n                if (ERRNO_CODES[key2] === errno2) {\n                  this.code = key2;\n                  break;\n                }\n              }\n            };\n            this.setErrno(errno);\n            this.message = ERRNO_MESSAGES[errno];\n            if (this.stack)\n              Object.defineProperty(this, \"stack\", { value: new Error().stack, writable: true });\n          };\n          FS.ErrnoError.prototype = new Error();\n          FS.ErrnoError.prototype.constructor = FS.ErrnoError;\n          [ERRNO_CODES.ENOENT].forEach(function(code) {\n            FS.genericErrors[code] = new FS.ErrnoError(code);\n            FS.genericErrors[code].stack = \"<generic error, no stack>\";\n          });\n        },\n        staticInit: function() {\n          FS.ensureErrnoError();\n          FS.nameTable = new Array(4096);\n          FS.mount(MEMFS, {}, \"/\");\n          FS.createDefaultDirectories();\n          FS.createDefaultDevices();\n          FS.createSpecialDirectories();\n          FS.filesystems = { MEMFS, IDBFS, NODEFS, WORKERFS };\n        },\n        init: function(input, output, error) {\n          assert(\n            !FS.init.initialized,\n            \"FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)\"\n          );\n          FS.init.initialized = true;\n          FS.ensureErrnoError();\n          Module[\"stdin\"] = input || Module[\"stdin\"];\n          Module[\"stdout\"] = output || Module[\"stdout\"];\n          Module[\"stderr\"] = error || Module[\"stderr\"];\n          FS.createStandardStreams();\n        },\n        quit: function() {\n          FS.init.initialized = false;\n          var fflush = Module[\"_fflush\"];\n          if (fflush)\n            fflush(0);\n          for (var i = 0; i < FS.streams.length; i++) {\n            var stream = FS.streams[i];\n            if (!stream) {\n              continue;\n            }\n            FS.close(stream);\n          }\n        },\n        getMode: function(canRead, canWrite) {\n          var mode = 0;\n          if (canRead)\n            mode |= 292 | 73;\n          if (canWrite)\n            mode |= 146;\n          return mode;\n        },\n        joinPath: function(parts, forceRelative) {\n          var path2 = PATH.join.apply(null, parts);\n          if (forceRelative && path2[0] == \"/\")\n            path2 = path2.substr(1);\n          return path2;\n        },\n        absolutePath: function(relative, base) {\n          return PATH.resolve(base, relative);\n        },\n        standardizePath: function(path2) {\n          return PATH.normalize(path2);\n        },\n        findObject: function(path2, dontResolveLastLink) {\n          var ret = FS.analyzePath(path2, dontResolveLastLink);\n          if (ret.exists) {\n            return ret.object;\n          } else {\n            ___setErrNo(ret.error);\n            return null;\n          }\n        },\n        analyzePath: function(path2, dontResolveLastLink) {\n          try {\n            var lookup = FS.lookupPath(path2, { follow: !dontResolveLastLink });\n            path2 = lookup.path;\n          } catch (e) {\n          }\n          var ret = {\n            isRoot: false,\n            exists: false,\n            error: 0,\n            name: null,\n            path: null,\n            object: null,\n            parentExists: false,\n            parentPath: null,\n            parentObject: null\n          };\n          try {\n            var lookup = FS.lookupPath(path2, { parent: true });\n            ret.parentExists = true;\n            ret.parentPath = lookup.path;\n            ret.parentObject = lookup.node;\n            ret.name = PATH.basename(path2);\n            lookup = FS.lookupPath(path2, { follow: !dontResolveLastLink });\n            ret.exists = true;\n            ret.path = lookup.path;\n            ret.object = lookup.node;\n            ret.name = lookup.node.name;\n            ret.isRoot = lookup.path === \"/\";\n          } catch (e) {\n            ret.error = e.errno;\n          }\n          return ret;\n        },\n        createFolder: function(parent, name, canRead, canWrite) {\n          var path2 = PATH.join2(typeof parent === \"string\" ? parent : FS.getPath(parent), name);\n          var mode = FS.getMode(canRead, canWrite);\n          return FS.mkdir(path2, mode);\n        },\n        createPath: function(parent, path2, canRead, canWrite) {\n          parent = typeof parent === \"string\" ? parent : FS.getPath(parent);\n          var parts = path2.split(\"/\").reverse();\n          while (parts.length) {\n            var part = parts.pop();\n            if (!part)\n              continue;\n            var current = PATH.join2(parent, part);\n            try {\n              FS.mkdir(current);\n            } catch (e) {\n            }\n            parent = current;\n          }\n          return current;\n        },\n        createFile: function(parent, name, properties, canRead, canWrite) {\n          var path2 = PATH.join2(typeof parent === \"string\" ? parent : FS.getPath(parent), name);\n          var mode = FS.getMode(canRead, canWrite);\n          return FS.create(path2, mode);\n        },\n        createDataFile: function(parent, name, data, canRead, canWrite, canOwn) {\n          var path2 = name ? PATH.join2(typeof parent === \"string\" ? parent : FS.getPath(parent), name) : parent;\n          var mode = FS.getMode(canRead, canWrite);\n          var node = FS.create(path2, mode);\n          if (data) {\n            if (typeof data === \"string\") {\n              var arr = new Array(data.length);\n              for (var i = 0, len = data.length; i < len; ++i)\n                arr[i] = data.charCodeAt(i);\n              data = arr;\n            }\n            FS.chmod(node, mode | 146);\n            var stream = FS.open(node, \"w\");\n            FS.write(stream, data, 0, data.length, 0, canOwn);\n            FS.close(stream);\n            FS.chmod(node, mode);\n          }\n          return node;\n        },\n        createDevice: function(parent, name, input, output) {\n          var path2 = PATH.join2(typeof parent === \"string\" ? parent : FS.getPath(parent), name);\n          var mode = FS.getMode(!!input, !!output);\n          if (!FS.createDevice.major)\n            FS.createDevice.major = 64;\n          var dev = FS.makedev(FS.createDevice.major++, 0);\n          FS.registerDevice(dev, {\n            open: function(stream) {\n              stream.seekable = false;\n            },\n            close: function(stream) {\n              if (output && output.buffer && output.buffer.length) {\n                output(10);\n              }\n            },\n            read: function(stream, buffer2, offset, length, pos) {\n              var bytesRead = 0;\n              for (var i = 0; i < length; i++) {\n                var result;\n                try {\n                  result = input();\n                } catch (e) {\n                  throw new FS.ErrnoError(ERRNO_CODES.EIO);\n                }\n                if (result === void 0 && bytesRead === 0) {\n                  throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);\n                }\n                if (result === null || result === void 0)\n                  break;\n                bytesRead++;\n                buffer2[offset + i] = result;\n              }\n              if (bytesRead) {\n                stream.node.timestamp = Date.now();\n              }\n              return bytesRead;\n            },\n            write: function(stream, buffer2, offset, length, pos) {\n              for (var i = 0; i < length; i++) {\n                try {\n                  output(buffer2[offset + i]);\n                } catch (e) {\n                  throw new FS.ErrnoError(ERRNO_CODES.EIO);\n                }\n              }\n              if (length) {\n                stream.node.timestamp = Date.now();\n              }\n              return i;\n            }\n          });\n          return FS.mkdev(path2, mode, dev);\n        },\n        createLink: function(parent, name, target, canRead, canWrite) {\n          var path2 = PATH.join2(typeof parent === \"string\" ? parent : FS.getPath(parent), name);\n          return FS.symlink(target, path2);\n        },\n        forceLoadFile: function(obj) {\n          if (obj.isDevice || obj.isFolder || obj.link || obj.contents)\n            return true;\n          var success = true;\n          if (typeof XMLHttpRequest !== \"undefined\") {\n            throw new Error(\n              \"Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.\"\n            );\n          } else if (Module[\"read\"]) {\n            try {\n              obj.contents = intArrayFromString(Module[\"read\"](obj.url), true);\n              obj.usedBytes = obj.contents.length;\n            } catch (e) {\n              success = false;\n            }\n          } else {\n            throw new Error(\"Cannot load without read() or XMLHttpRequest.\");\n          }\n          if (!success)\n            ___setErrNo(ERRNO_CODES.EIO);\n          return success;\n        },\n        createLazyFile: function(parent, name, url, canRead, canWrite) {\n          function LazyUint8Array() {\n            this.lengthKnown = false;\n            this.chunks = [];\n          }\n          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {\n            if (idx > this.length - 1 || idx < 0) {\n              return void 0;\n            }\n            var chunkOffset = idx % this.chunkSize;\n            var chunkNum = idx / this.chunkSize | 0;\n            return this.getter(chunkNum)[chunkOffset];\n          };\n          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {\n            this.getter = getter;\n          };\n          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"HEAD\", url, false);\n            xhr.send(null);\n            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304))\n              throw new Error(\"Couldn't load \" + url + \". Status: \" + xhr.status);\n            var datalength = Number(xhr.getResponseHeader(\"Content-length\"));\n            var header;\n            var hasByteServing = (header = xhr.getResponseHeader(\"Accept-Ranges\")) && header === \"bytes\";\n            var usesGzip = (header = xhr.getResponseHeader(\"Content-Encoding\")) && header === \"gzip\";\n            var chunkSize = 1024 * 1024;\n            if (!hasByteServing)\n              chunkSize = datalength;\n            var doXHR = function(from, to) {\n              if (from > to)\n                throw new Error(\"invalid range (\" + from + \", \" + to + \") or no bytes requested!\");\n              if (to > datalength - 1)\n                throw new Error(\"only \" + datalength + \" bytes available! programmer error!\");\n              var xhr2 = new XMLHttpRequest();\n              xhr2.open(\"GET\", url, false);\n              if (datalength !== chunkSize)\n                xhr2.setRequestHeader(\"Range\", \"bytes=\" + from + \"-\" + to);\n              if (typeof Uint8Array != \"undefined\")\n                xhr2.responseType = \"arraybuffer\";\n              if (xhr2.overrideMimeType) {\n                xhr2.overrideMimeType(\"text/plain; charset=x-user-defined\");\n              }\n              xhr2.send(null);\n              if (!(xhr2.status >= 200 && xhr2.status < 300 || xhr2.status === 304))\n                throw new Error(\"Couldn't load \" + url + \". Status: \" + xhr2.status);\n              if (xhr2.response !== void 0) {\n                return new Uint8Array(xhr2.response || []);\n              } else {\n                return intArrayFromString(xhr2.responseText || \"\", true);\n              }\n            };\n            var lazyArray2 = this;\n            lazyArray2.setDataGetter(function(chunkNum) {\n              var start = chunkNum * chunkSize;\n              var end = (chunkNum + 1) * chunkSize - 1;\n              end = Math.min(end, datalength - 1);\n              if (typeof lazyArray2.chunks[chunkNum] === \"undefined\") {\n                lazyArray2.chunks[chunkNum] = doXHR(start, end);\n              }\n              if (typeof lazyArray2.chunks[chunkNum] === \"undefined\")\n                throw new Error(\"doXHR failed!\");\n              return lazyArray2.chunks[chunkNum];\n            });\n            if (usesGzip || !datalength) {\n              chunkSize = datalength = 1;\n              datalength = this.getter(0).length;\n              chunkSize = datalength;\n              console.log(\"LazyFiles on gzip forces download of the whole file when length is accessed\");\n            }\n            this._length = datalength;\n            this._chunkSize = chunkSize;\n            this.lengthKnown = true;\n          };\n          if (typeof XMLHttpRequest !== \"undefined\") {\n            if (!ENVIRONMENT_IS_WORKER)\n              throw \"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc\";\n            var lazyArray = new LazyUint8Array();\n            Object.defineProperties(lazyArray, {\n              length: {\n                get: function() {\n                  if (!this.lengthKnown) {\n                    this.cacheLength();\n                  }\n                  return this._length;\n                }\n              },\n              chunkSize: {\n                get: function() {\n                  if (!this.lengthKnown) {\n                    this.cacheLength();\n                  }\n                  return this._chunkSize;\n                }\n              }\n            });\n            var properties = { isDevice: false, contents: lazyArray };\n          } else {\n            var properties = { isDevice: false, url };\n          }\n          var node = FS.createFile(parent, name, properties, canRead, canWrite);\n          if (properties.contents) {\n            node.contents = properties.contents;\n          } else if (properties.url) {\n            node.contents = null;\n            node.url = properties.url;\n          }\n          Object.defineProperties(node, {\n            usedBytes: {\n              get: function() {\n                return this.contents.length;\n              }\n            }\n          });\n          var stream_ops = {};\n          var keys = Object.keys(node.stream_ops);\n          keys.forEach(function(key2) {\n            var fn = node.stream_ops[key2];\n            stream_ops[key2] = function forceLoadLazyFile() {\n              if (!FS.forceLoadFile(node)) {\n                throw new FS.ErrnoError(ERRNO_CODES.EIO);\n              }\n              return fn.apply(null, arguments);\n            };\n          });\n          stream_ops.read = function stream_ops_read(stream, buffer2, offset, length, position) {\n            if (!FS.forceLoadFile(node)) {\n              throw new FS.ErrnoError(ERRNO_CODES.EIO);\n            }\n            var contents = stream.node.contents;\n            if (position >= contents.length)\n              return 0;\n            var size = Math.min(contents.length - position, length);\n            assert(size >= 0);\n            if (contents.slice) {\n              for (var i = 0; i < size; i++) {\n                buffer2[offset + i] = contents[position + i];\n              }\n            } else {\n              for (var i = 0; i < size; i++) {\n                buffer2[offset + i] = contents.get(position + i);\n              }\n            }\n            return size;\n          };\n          node.stream_ops = stream_ops;\n          return node;\n        },\n        createPreloadedFile: function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {\n          Browser.init();\n          var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;\n          var dep = getUniqueRunDependency(\"cp \" + fullname);\n          function processData(byteArray) {\n            function finish(byteArray2) {\n              if (preFinish)\n                preFinish();\n              if (!dontCreateFile) {\n                FS.createDataFile(parent, name, byteArray2, canRead, canWrite, canOwn);\n              }\n              if (onload)\n                onload();\n              removeRunDependency(dep);\n            }\n            var handled = false;\n            Module[\"preloadPlugins\"].forEach(function(plugin) {\n              if (handled)\n                return;\n              if (plugin[\"canHandle\"](fullname)) {\n                plugin[\"handle\"](byteArray, fullname, finish, function() {\n                  if (onerror)\n                    onerror();\n                  removeRunDependency(dep);\n                });\n                handled = true;\n              }\n            });\n            if (!handled)\n              finish(byteArray);\n          }\n          addRunDependency(dep);\n          if (typeof url == \"string\") {\n            Browser.asyncLoad(\n              url,\n              function(byteArray) {\n                processData(byteArray);\n              },\n              onerror\n            );\n          } else {\n            processData(url);\n          }\n        },\n        indexedDB: function() {\n          return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n        },\n        DB_NAME: function() {\n          return \"EM_FS_\" + window.location.pathname;\n        },\n        DB_VERSION: 20,\n        DB_STORE_NAME: \"FILE_DATA\",\n        saveFilesToDB: function(paths, onload, onerror) {\n          onload = onload || function() {\n          };\n          onerror = onerror || function() {\n          };\n          var indexedDB2 = FS.indexedDB();\n          try {\n            var openRequest = indexedDB2.open(FS.DB_NAME(), FS.DB_VERSION);\n          } catch (e) {\n            return onerror(e);\n          }\n          openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {\n            console.log(\"creating db\");\n            var db = openRequest.result;\n            db.createObjectStore(FS.DB_STORE_NAME);\n          };\n          openRequest.onsuccess = function openRequest_onsuccess() {\n            var db = openRequest.result;\n            var transaction = db.transaction([FS.DB_STORE_NAME], \"readwrite\");\n            var files = transaction.objectStore(FS.DB_STORE_NAME);\n            var ok = 0, fail = 0, total = paths.length;\n            function finish() {\n              if (fail == 0)\n                onload();\n              else\n                onerror();\n            }\n            paths.forEach(function(path2) {\n              var putRequest = files.put(FS.analyzePath(path2).object.contents, path2);\n              putRequest.onsuccess = function putRequest_onsuccess() {\n                ok++;\n                if (ok + fail == total)\n                  finish();\n              };\n              putRequest.onerror = function putRequest_onerror() {\n                fail++;\n                if (ok + fail == total)\n                  finish();\n              };\n            });\n            transaction.onerror = onerror;\n          };\n          openRequest.onerror = onerror;\n        },\n        loadFilesFromDB: function(paths, onload, onerror) {\n          onload = onload || function() {\n          };\n          onerror = onerror || function() {\n          };\n          var indexedDB2 = FS.indexedDB();\n          try {\n            var openRequest = indexedDB2.open(FS.DB_NAME(), FS.DB_VERSION);\n          } catch (e) {\n            return onerror(e);\n          }\n          openRequest.onupgradeneeded = onerror;\n          openRequest.onsuccess = function openRequest_onsuccess() {\n            var db = openRequest.result;\n            try {\n              var transaction = db.transaction([FS.DB_STORE_NAME], \"readonly\");\n            } catch (e) {\n              onerror(e);\n              return;\n            }\n            var files = transaction.objectStore(FS.DB_STORE_NAME);\n            var ok = 0, fail = 0, total = paths.length;\n            function finish() {\n              if (fail == 0)\n                onload();\n              else\n                onerror();\n            }\n            paths.forEach(function(path2) {\n              var getRequest = files.get(path2);\n              getRequest.onsuccess = function getRequest_onsuccess() {\n                if (FS.analyzePath(path2).exists) {\n                  FS.unlink(path2);\n                }\n                FS.createDataFile(PATH.dirname(path2), PATH.basename(path2), getRequest.result, true, true, true);\n                ok++;\n                if (ok + fail == total)\n                  finish();\n              };\n              getRequest.onerror = function getRequest_onerror() {\n                fail++;\n                if (ok + fail == total)\n                  finish();\n              };\n            });\n            transaction.onerror = onerror;\n          };\n          openRequest.onerror = onerror;\n        }\n      };\n      var SYSCALLS = {\n        DEFAULT_POLLMASK: 5,\n        mappings: {},\n        umask: 511,\n        calculateAt: function(dirfd, path2) {\n          if (path2[0] !== \"/\") {\n            var dir;\n            if (dirfd === -100) {\n              dir = FS.cwd();\n            } else {\n              var dirstream = FS.getStream(dirfd);\n              if (!dirstream)\n                throw new FS.ErrnoError(ERRNO_CODES.EBADF);\n              dir = dirstream.path;\n            }\n            path2 = PATH.join2(dir, path2);\n          }\n          return path2;\n        },\n        doStat: function(func, path2, buf) {\n          try {\n            var stat = func(path2);\n          } catch (e) {\n            if (e && e.node && PATH.normalize(path2) !== PATH.normalize(FS.getPath(e.node))) {\n              return -ERRNO_CODES.ENOTDIR;\n            }\n            throw e;\n          }\n          HEAP32[buf >> 2] = stat.dev;\n          HEAP32[buf + 4 >> 2] = 0;\n          HEAP32[buf + 8 >> 2] = stat.ino;\n          HEAP32[buf + 12 >> 2] = stat.mode;\n          HEAP32[buf + 16 >> 2] = stat.nlink;\n          HEAP32[buf + 20 >> 2] = stat.uid;\n          HEAP32[buf + 24 >> 2] = stat.gid;\n          HEAP32[buf + 28 >> 2] = stat.rdev;\n          HEAP32[buf + 32 >> 2] = 0;\n          HEAP32[buf + 36 >> 2] = stat.size;\n          HEAP32[buf + 40 >> 2] = 4096;\n          HEAP32[buf + 44 >> 2] = stat.blocks;\n          HEAP32[buf + 48 >> 2] = stat.atime.getTime() / 1e3 | 0;\n          HEAP32[buf + 52 >> 2] = 0;\n          HEAP32[buf + 56 >> 2] = stat.mtime.getTime() / 1e3 | 0;\n          HEAP32[buf + 60 >> 2] = 0;\n          HEAP32[buf + 64 >> 2] = stat.ctime.getTime() / 1e3 | 0;\n          HEAP32[buf + 68 >> 2] = 0;\n          HEAP32[buf + 72 >> 2] = stat.ino;\n          return 0;\n        },\n        doMsync: function(addr, stream, len, flags) {\n          var buffer2 = new Uint8Array(HEAPU8.subarray(addr, addr + len));\n          FS.msync(stream, buffer2, 0, len, flags);\n        },\n        doMkdir: function(path2, mode) {\n          path2 = PATH.normalize(path2);\n          if (path2[path2.length - 1] === \"/\")\n            path2 = path2.substr(0, path2.length - 1);\n          FS.mkdir(path2, mode, 0);\n          return 0;\n        },\n        doMknod: function(path2, mode, dev) {\n          switch (mode & 61440) {\n            case 32768:\n            case 8192:\n            case 24576:\n            case 4096:\n            case 49152:\n              break;\n            default:\n              return -ERRNO_CODES.EINVAL;\n          }\n          FS.mknod(path2, mode, dev);\n          return 0;\n        },\n        doReadlink: function(path2, buf, bufsize) {\n          if (bufsize <= 0)\n            return -ERRNO_CODES.EINVAL;\n          var ret = FS.readlink(path2);\n          var len = Math.min(bufsize, lengthBytesUTF8(ret));\n          var endChar = HEAP8[buf + len];\n          stringToUTF8(ret, buf, bufsize + 1);\n          HEAP8[buf + len] = endChar;\n          return len;\n        },\n        doAccess: function(path2, amode) {\n          if (amode & ~7) {\n            return -ERRNO_CODES.EINVAL;\n          }\n          var node;\n          var lookup = FS.lookupPath(path2, { follow: true });\n          node = lookup.node;\n          var perms = \"\";\n          if (amode & 4)\n            perms += \"r\";\n          if (amode & 2)\n            perms += \"w\";\n          if (amode & 1)\n            perms += \"x\";\n          if (perms && FS.nodePermissions(node, perms)) {\n            return -ERRNO_CODES.EACCES;\n          }\n          return 0;\n        },\n        doDup: function(path2, flags, suggestFD) {\n          var suggest = FS.getStream(suggestFD);\n          if (suggest)\n            FS.close(suggest);\n          return FS.open(path2, flags, 0, suggestFD, suggestFD).fd;\n        },\n        doReadv: function(stream, iov, iovcnt, offset) {\n          var ret = 0;\n          for (var i = 0; i < iovcnt; i++) {\n            var ptr = HEAP32[iov + i * 8 >> 2];\n            var len = HEAP32[iov + (i * 8 + 4) >> 2];\n            var curr = FS.read(stream, HEAP8, ptr, len, offset);\n            if (curr < 0)\n              return -1;\n            ret += curr;\n            if (curr < len)\n              break;\n          }\n          return ret;\n        },\n        doWritev: function(stream, iov, iovcnt, offset) {\n          var ret = 0;\n          for (var i = 0; i < iovcnt; i++) {\n            var ptr = HEAP32[iov + i * 8 >> 2];\n            var len = HEAP32[iov + (i * 8 + 4) >> 2];\n            var curr = FS.write(stream, HEAP8, ptr, len, offset);\n            if (curr < 0)\n              return -1;\n            ret += curr;\n          }\n          return ret;\n        },\n        varargs: 0,\n        get: function(varargs) {\n          SYSCALLS.varargs += 4;\n          var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];\n          return ret;\n        },\n        getStr: function() {\n          var ret = Pointer_stringify(SYSCALLS.get());\n          return ret;\n        },\n        getStreamFromFD: function() {\n          var stream = FS.getStream(SYSCALLS.get());\n          if (!stream)\n            throw new FS.ErrnoError(ERRNO_CODES.EBADF);\n          return stream;\n        },\n        getSocketFromFD: function() {\n          var socket = SOCKFS.getSocket(SYSCALLS.get());\n          if (!socket)\n            throw new FS.ErrnoError(ERRNO_CODES.EBADF);\n          return socket;\n        },\n        getSocketAddress: function(allowNull) {\n          var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();\n          if (allowNull && addrp === 0)\n            return null;\n          var info = __read_sockaddr(addrp, addrlen);\n          if (info.errno)\n            throw new FS.ErrnoError(info.errno);\n          info.addr = DNS.lookup_addr(info.addr) || info.addr;\n          return info;\n        },\n        get64: function() {\n          var low = SYSCALLS.get(), high = SYSCALLS.get();\n          if (low >= 0)\n            assert(high === 0);\n          else\n            assert(high === -1);\n          return low;\n        },\n        getZero: function() {\n          assert(SYSCALLS.get() === 0);\n        }\n      };\n      function ___syscall140(which, varargs) {\n        SYSCALLS.varargs = varargs;\n        try {\n          var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();\n          var offset = offset_low;\n          FS.llseek(stream, offset, whence);\n          HEAP32[result >> 2] = stream.position;\n          if (stream.getdents && offset === 0 && whence === 0)\n            stream.getdents = null;\n          return 0;\n        } catch (e) {\n          if (typeof FS === \"undefined\" || !(e instanceof FS.ErrnoError))\n            abort(e);\n          return -e.errno;\n        }\n      }\n      function ___syscall145(which, varargs) {\n        SYSCALLS.varargs = varargs;\n        try {\n          var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();\n          return SYSCALLS.doReadv(stream, iov, iovcnt);\n        } catch (e) {\n          if (typeof FS === \"undefined\" || !(e instanceof FS.ErrnoError))\n            abort(e);\n          return -e.errno;\n        }\n      }\n      function ___syscall146(which, varargs) {\n        SYSCALLS.varargs = varargs;\n        try {\n          var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();\n          return SYSCALLS.doWritev(stream, iov, iovcnt);\n        } catch (e) {\n          if (typeof FS === \"undefined\" || !(e instanceof FS.ErrnoError))\n            abort(e);\n          return -e.errno;\n        }\n      }\n      function ___syscall54(which, varargs) {\n        SYSCALLS.varargs = varargs;\n        try {\n          var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();\n          switch (op) {\n            case 21509:\n            case 21505: {\n              if (!stream.tty)\n                return -ERRNO_CODES.ENOTTY;\n              return 0;\n            }\n            case 21510:\n            case 21511:\n            case 21512:\n            case 21506:\n            case 21507:\n            case 21508: {\n              if (!stream.tty)\n                return -ERRNO_CODES.ENOTTY;\n              return 0;\n            }\n            case 21519: {\n              if (!stream.tty)\n                return -ERRNO_CODES.ENOTTY;\n              var argp = SYSCALLS.get();\n              HEAP32[argp >> 2] = 0;\n              return 0;\n            }\n            case 21520: {\n              if (!stream.tty)\n                return -ERRNO_CODES.ENOTTY;\n              return -ERRNO_CODES.EINVAL;\n            }\n            case 21531: {\n              var argp = SYSCALLS.get();\n              return FS.ioctl(stream, op, argp);\n            }\n            case 21523: {\n              if (!stream.tty)\n                return -ERRNO_CODES.ENOTTY;\n              return 0;\n            }\n            case 21524: {\n              if (!stream.tty)\n                return -ERRNO_CODES.ENOTTY;\n              return 0;\n            }\n            default:\n              abort(\"bad ioctl syscall \" + op);\n          }\n        } catch (e) {\n          if (typeof FS === \"undefined\" || !(e instanceof FS.ErrnoError))\n            abort(e);\n          return -e.errno;\n        }\n      }\n      function ___syscall6(which, varargs) {\n        SYSCALLS.varargs = varargs;\n        try {\n          var stream = SYSCALLS.getStreamFromFD();\n          FS.close(stream);\n          return 0;\n        } catch (e) {\n          if (typeof FS === \"undefined\" || !(e instanceof FS.ErrnoError))\n            abort(e);\n          return -e.errno;\n        }\n      }\n      function ___syscall91(which, varargs) {\n        SYSCALLS.varargs = varargs;\n        try {\n          var addr = SYSCALLS.get(), len = SYSCALLS.get();\n          var info = SYSCALLS.mappings[addr];\n          if (!info)\n            return 0;\n          if (len === info.len) {\n            var stream = FS.getStream(info.fd);\n            SYSCALLS.doMsync(addr, stream, len, info.flags);\n            FS.munmap(stream);\n            SYSCALLS.mappings[addr] = null;\n            if (info.allocated) {\n              _free(info.malloc);\n            }\n          }\n          return 0;\n        } catch (e) {\n          if (typeof FS === \"undefined\" || !(e instanceof FS.ErrnoError))\n            abort(e);\n          return -e.errno;\n        }\n      }\n      function ___unlock() {\n      }\n      function _abort() {\n        Module[\"abort\"]();\n      }\n      var ENV = {};\n      function _getenv(name) {\n        if (name === 0)\n          return 0;\n        name = Pointer_stringify(name);\n        if (!ENV.hasOwnProperty(name))\n          return 0;\n        if (_getenv.ret)\n          _free(_getenv.ret);\n        _getenv.ret = allocateUTF8(ENV[name]);\n        return _getenv.ret;\n      }\n      var _llvm_pow_f64 = Math_pow;\n      function _llvm_stackrestore(p) {\n        var self2 = _llvm_stacksave;\n        var ret = self2.LLVM_SAVEDSTACKS[p];\n        self2.LLVM_SAVEDSTACKS.splice(p, 1);\n        stackRestore(ret);\n      }\n      function _llvm_stacksave() {\n        var self2 = _llvm_stacksave;\n        if (!self2.LLVM_SAVEDSTACKS) {\n          self2.LLVM_SAVEDSTACKS = [];\n        }\n        self2.LLVM_SAVEDSTACKS.push(stackSave());\n        return self2.LLVM_SAVEDSTACKS.length - 1;\n      }\n      function _emscripten_memcpy_big(dest, src, num) {\n        HEAPU8.set(HEAPU8.subarray(src, src + num), dest);\n        return dest;\n      }\n      function _pthread_cond_wait() {\n        return 0;\n      }\n      function __isLeapYear(year) {\n        return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n      }\n      function __arraySum(array, index) {\n        var sum = 0;\n        for (var i = 0; i <= index; sum += array[i++])\n          ;\n        return sum;\n      }\n      var __MONTH_DAYS_LEAP = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n      var __MONTH_DAYS_REGULAR = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n      function __addDays(date, days) {\n        var newDate = new Date(date.getTime());\n        while (days > 0) {\n          var leap = __isLeapYear(newDate.getFullYear());\n          var currentMonth = newDate.getMonth();\n          var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];\n          if (days > daysInCurrentMonth - newDate.getDate()) {\n            days -= daysInCurrentMonth - newDate.getDate() + 1;\n            newDate.setDate(1);\n            if (currentMonth < 11) {\n              newDate.setMonth(currentMonth + 1);\n            } else {\n              newDate.setMonth(0);\n              newDate.setFullYear(newDate.getFullYear() + 1);\n            }\n          } else {\n            newDate.setDate(newDate.getDate() + days);\n            return newDate;\n          }\n        }\n        return newDate;\n      }\n      function _strftime(s, maxsize, format, tm) {\n        var tm_zone = HEAP32[tm + 40 >> 2];\n        var date = {\n          tm_sec: HEAP32[tm >> 2],\n          tm_min: HEAP32[tm + 4 >> 2],\n          tm_hour: HEAP32[tm + 8 >> 2],\n          tm_mday: HEAP32[tm + 12 >> 2],\n          tm_mon: HEAP32[tm + 16 >> 2],\n          tm_year: HEAP32[tm + 20 >> 2],\n          tm_wday: HEAP32[tm + 24 >> 2],\n          tm_yday: HEAP32[tm + 28 >> 2],\n          tm_isdst: HEAP32[tm + 32 >> 2],\n          tm_gmtoff: HEAP32[tm + 36 >> 2],\n          tm_zone: tm_zone ? Pointer_stringify(tm_zone) : \"\"\n        };\n        var pattern = Pointer_stringify(format);\n        var EXPANSION_RULES_1 = {\n          \"%c\": \"%a %b %d %H:%M:%S %Y\",\n          \"%D\": \"%m/%d/%y\",\n          \"%F\": \"%Y-%m-%d\",\n          \"%h\": \"%b\",\n          \"%r\": \"%I:%M:%S %p\",\n          \"%R\": \"%H:%M\",\n          \"%T\": \"%H:%M:%S\",\n          \"%x\": \"%m/%d/%y\",\n          \"%X\": \"%H:%M:%S\"\n        };\n        for (var rule in EXPANSION_RULES_1) {\n          pattern = pattern.replace(new RegExp(rule, \"g\"), EXPANSION_RULES_1[rule]);\n        }\n        var WEEKDAYS = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n        var MONTHS = [\n          \"January\",\n          \"February\",\n          \"March\",\n          \"April\",\n          \"May\",\n          \"June\",\n          \"July\",\n          \"August\",\n          \"September\",\n          \"October\",\n          \"November\",\n          \"December\"\n        ];\n        function leadingSomething(value, digits, character) {\n          var str = typeof value === \"number\" ? value.toString() : value || \"\";\n          while (str.length < digits) {\n            str = character[0] + str;\n          }\n          return str;\n        }\n        function leadingNulls(value, digits) {\n          return leadingSomething(value, digits, \"0\");\n        }\n        function compareByDay(date1, date2) {\n          function sgn(value) {\n            return value < 0 ? -1 : value > 0 ? 1 : 0;\n          }\n          var compare;\n          if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {\n            if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {\n              compare = sgn(date1.getDate() - date2.getDate());\n            }\n          }\n          return compare;\n        }\n        function getFirstWeekStartDate(janFourth) {\n          switch (janFourth.getDay()) {\n            case 0:\n              return new Date(janFourth.getFullYear() - 1, 11, 29);\n            case 1:\n              return janFourth;\n            case 2:\n              return new Date(janFourth.getFullYear(), 0, 3);\n            case 3:\n              return new Date(janFourth.getFullYear(), 0, 2);\n            case 4:\n              return new Date(janFourth.getFullYear(), 0, 1);\n            case 5:\n              return new Date(janFourth.getFullYear() - 1, 11, 31);\n            case 6:\n              return new Date(janFourth.getFullYear() - 1, 11, 30);\n          }\n        }\n        function getWeekBasedYear(date2) {\n          var thisDate = __addDays(new Date(date2.tm_year + 1900, 0, 1), date2.tm_yday);\n          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);\n          var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4);\n          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);\n          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);\n          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {\n            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {\n              return thisDate.getFullYear() + 1;\n            } else {\n              return thisDate.getFullYear();\n            }\n          } else {\n            return thisDate.getFullYear() - 1;\n          }\n        }\n        var EXPANSION_RULES_2 = {\n          \"%a\": function(date2) {\n            return WEEKDAYS[date2.tm_wday].substring(0, 3);\n          },\n          \"%A\": function(date2) {\n            return WEEKDAYS[date2.tm_wday];\n          },\n          \"%b\": function(date2) {\n            return MONTHS[date2.tm_mon].substring(0, 3);\n          },\n          \"%B\": function(date2) {\n            return MONTHS[date2.tm_mon];\n          },\n          \"%C\": function(date2) {\n            var year = date2.tm_year + 1900;\n            return leadingNulls(year / 100 | 0, 2);\n          },\n          \"%d\": function(date2) {\n            return leadingNulls(date2.tm_mday, 2);\n          },\n          \"%e\": function(date2) {\n            return leadingSomething(date2.tm_mday, 2, \" \");\n          },\n          \"%g\": function(date2) {\n            return getWeekBasedYear(date2).toString().substring(2);\n          },\n          \"%G\": function(date2) {\n            return getWeekBasedYear(date2);\n          },\n          \"%H\": function(date2) {\n            return leadingNulls(date2.tm_hour, 2);\n          },\n          \"%I\": function(date2) {\n            var twelveHour = date2.tm_hour;\n            if (twelveHour == 0)\n              twelveHour = 12;\n            else if (twelveHour > 12)\n              twelveHour -= 12;\n            return leadingNulls(twelveHour, 2);\n          },\n          \"%j\": function(date2) {\n            return leadingNulls(\n              date2.tm_mday + __arraySum(__isLeapYear(date2.tm_year + 1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date2.tm_mon - 1),\n              3\n            );\n          },\n          \"%m\": function(date2) {\n            return leadingNulls(date2.tm_mon + 1, 2);\n          },\n          \"%M\": function(date2) {\n            return leadingNulls(date2.tm_min, 2);\n          },\n          \"%n\": function() {\n            return \"\\n\";\n          },\n          \"%p\": function(date2) {\n            if (date2.tm_hour >= 0 && date2.tm_hour < 12) {\n              return \"AM\";\n            } else {\n              return \"PM\";\n            }\n          },\n          \"%S\": function(date2) {\n            return leadingNulls(date2.tm_sec, 2);\n          },\n          \"%t\": function() {\n            return \"\t\";\n          },\n          \"%u\": function(date2) {\n            var day = new Date(date2.tm_year + 1900, date2.tm_mon + 1, date2.tm_mday, 0, 0, 0, 0);\n            return day.getDay() || 7;\n          },\n          \"%U\": function(date2) {\n            var janFirst = new Date(date2.tm_year + 1900, 0, 1);\n            var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7 - janFirst.getDay());\n            var endDate = new Date(date2.tm_year + 1900, date2.tm_mon, date2.tm_mday);\n            if (compareByDay(firstSunday, endDate) < 0) {\n              var februaryFirstUntilEndMonth = __arraySum(\n                __isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR,\n                endDate.getMonth() - 1\n              ) - 31;\n              var firstSundayUntilEndJanuary = 31 - firstSunday.getDate();\n              var days = firstSundayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();\n              return leadingNulls(Math.ceil(days / 7), 2);\n            }\n            return compareByDay(firstSunday, janFirst) === 0 ? \"01\" : \"00\";\n          },\n          \"%V\": function(date2) {\n            var janFourthThisYear = new Date(date2.tm_year + 1900, 0, 4);\n            var janFourthNextYear = new Date(date2.tm_year + 1901, 0, 4);\n            var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);\n            var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);\n            var endDate = __addDays(new Date(date2.tm_year + 1900, 0, 1), date2.tm_yday);\n            if (compareByDay(endDate, firstWeekStartThisYear) < 0) {\n              return \"53\";\n            }\n            if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {\n              return \"01\";\n            }\n            var daysDifference;\n            if (firstWeekStartThisYear.getFullYear() < date2.tm_year + 1900) {\n              daysDifference = date2.tm_yday + 32 - firstWeekStartThisYear.getDate();\n            } else {\n              daysDifference = date2.tm_yday + 1 - firstWeekStartThisYear.getDate();\n            }\n            return leadingNulls(Math.ceil(daysDifference / 7), 2);\n          },\n          \"%w\": function(date2) {\n            var day = new Date(date2.tm_year + 1900, date2.tm_mon + 1, date2.tm_mday, 0, 0, 0, 0);\n            return day.getDay();\n          },\n          \"%W\": function(date2) {\n            var janFirst = new Date(date2.tm_year, 0, 1);\n            var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7 - janFirst.getDay() + 1);\n            var endDate = new Date(date2.tm_year + 1900, date2.tm_mon, date2.tm_mday);\n            if (compareByDay(firstMonday, endDate) < 0) {\n              var februaryFirstUntilEndMonth = __arraySum(\n                __isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR,\n                endDate.getMonth() - 1\n              ) - 31;\n              var firstMondayUntilEndJanuary = 31 - firstMonday.getDate();\n              var days = firstMondayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();\n              return leadingNulls(Math.ceil(days / 7), 2);\n            }\n            return compareByDay(firstMonday, janFirst) === 0 ? \"01\" : \"00\";\n          },\n          \"%y\": function(date2) {\n            return (date2.tm_year + 1900).toString().substring(2);\n          },\n          \"%Y\": function(date2) {\n            return date2.tm_year + 1900;\n          },\n          \"%z\": function(date2) {\n            var off = date2.tm_gmtoff;\n            var ahead = off >= 0;\n            off = Math.abs(off) / 60;\n            off = off / 60 * 100 + off % 60;\n            return (ahead ? \"+\" : \"-\") + String(\"0000\" + off).slice(-4);\n          },\n          \"%Z\": function(date2) {\n            return date2.tm_zone;\n          },\n          \"%%\": function() {\n            return \"%\";\n          }\n        };\n        for (var rule in EXPANSION_RULES_2) {\n          if (pattern.indexOf(rule) >= 0) {\n            pattern = pattern.replace(new RegExp(rule, \"g\"), EXPANSION_RULES_2[rule](date));\n          }\n        }\n        var bytes = intArrayFromString(pattern, false);\n        if (bytes.length > maxsize) {\n          return 0;\n        }\n        writeArrayToMemory(bytes, s);\n        return bytes.length - 1;\n      }\n      function _strftime_l(s, maxsize, format, tm) {\n        return _strftime(s, maxsize, format, tm);\n      }\n      FS.staticInit();\n      __ATINIT__.unshift(function() {\n        if (!Module[\"noFSInit\"] && !FS.init.initialized)\n          FS.init();\n      });\n      __ATMAIN__.push(function() {\n        FS.ignorePermissions = false;\n      });\n      __ATEXIT__.push(function() {\n        FS.quit();\n      });\n      __ATINIT__.unshift(function() {\n        TTY.init();\n      });\n      __ATEXIT__.push(function() {\n        TTY.shutdown();\n      });\n      DYNAMICTOP_PTR = staticAlloc(4);\n      STACK_BASE = STACKTOP = alignMemory(STATICTOP);\n      STACK_MAX = STACK_BASE + TOTAL_STACK;\n      DYNAMIC_BASE = alignMemory(STACK_MAX);\n      HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;\n      staticSealed = true;\n      function intArrayFromString(stringy, dontAddNull, length) {\n        var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;\n        var u8array = new Array(len);\n        var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);\n        if (dontAddNull)\n          u8array.length = numBytesWritten;\n        return u8array;\n      }\n      Module[\"wasmTableSize\"] = 480;\n      Module[\"wasmMaxTableSize\"] = 480;\n      function invoke_ii(index, a1) {\n        var sp = stackSave();\n        try {\n          return Module[\"dynCall_ii\"](index, a1);\n        } catch (e) {\n          stackRestore(sp);\n          if (typeof e !== \"number\" && e !== \"longjmp\")\n            throw e;\n          Module[\"setThrew\"](1, 0);\n        }\n      }\n      function invoke_iii(index, a1, a2) {\n        var sp = stackSave();\n        try {\n          return Module[\"dynCall_iii\"](index, a1, a2);\n        } catch (e) {\n          stackRestore(sp);\n          if (typeof e !== \"number\" && e !== \"longjmp\")\n            throw e;\n          Module[\"setThrew\"](1, 0);\n        }\n      }\n      function invoke_iiii(index, a1, a2, a3) {\n        var sp = stackSave();\n        try {\n          return Module[\"dynCall_iiii\"](index, a1, a2, a3);\n        } catch (e) {\n          stackRestore(sp);\n          if (typeof e !== \"number\" && e !== \"longjmp\")\n            throw e;\n          Module[\"setThrew\"](1, 0);\n        }\n      }\n      function invoke_iiiii(index, a1, a2, a3, a4) {\n        var sp = stackSave();\n        try {\n          return Module[\"dynCall_iiiii\"](index, a1, a2, a3, a4);\n        } catch (e) {\n          stackRestore(sp);\n          if (typeof e !== \"number\" && e !== \"longjmp\")\n            throw e;\n          Module[\"setThrew\"](1, 0);\n        }\n      }\n      function invoke_iiiiid(index, a1, a2, a3, a4, a5) {\n        var sp = stackSave();\n        try {\n          return Module[\"dynCall_iiiiid\"](index, a1, a2, a3, a4, a5);\n        } catch (e) {\n          stackRestore(sp);\n          if (typeof e !== \"number\" && e !== \"longjmp\")\n            throw e;\n          Module[\"setThrew\"](1, 0);\n        }\n      }\n      function invoke_iiiiii(index, a1, a2, a3, a4, a5) {\n        var sp = stackSave();\n        try {\n          return Module[\"dynCall_iiiiii\"](index, a1, a2, a3, a4, a5);\n        } catch (e) {\n          stackRestore(sp);\n          if (typeof e !== \"number\" && e !== \"longjmp\")\n            throw e;\n          Module[\"setThrew\"](1, 0);\n        }\n      }\n      function invoke_iiiiiid(index, a1, a2, a3, a4, a5, a6) {\n        var sp = stackSave();\n        try {\n          return Module[\"dynCall_iiiiiid\"](index, a1, a2, a3, a4, a5, a6);\n        } catch (e) {\n          stackRestore(sp);\n          if (typeof e !== \"number\" && e !== \"longjmp\")\n            throw e;\n          Module[\"setThrew\"](1, 0);\n        }\n      }\n      function invoke_iiiiiii(index, a1, a2, a3, a4, a5, a6) {\n        var sp = stackSave();\n        try {\n          return Module[\"dynCall_iiiiiii\"](index, a1, a2, a3, a4, a5, a6);\n        } catch (e) {\n          stackRestore(sp);\n          if (typeof e !== \"number\" && e !== \"longjmp\")\n            throw e;\n          Module[\"setThrew\"](1, 0);\n        }\n      }\n      function invoke_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {\n        var sp = stackSave();\n        try {\n          return Module[\"dynCall_iiiiiiii\"](index, a1, a2, a3, a4, a5, a6, a7);\n        } catch (e) {\n          stackRestore(sp);\n          if (typeof e !== \"number\" && e !== \"longjmp\")\n            throw e;\n          Module[\"setThrew\"](1, 0);\n        }\n      }\n      function invoke_iiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {\n        var sp = stackSave();\n        try {\n          return Module[\"dynCall_iiiiiiiii\"](index, a1, a2, a3, a4, a5, a6, a7, a8);\n        } catch (e) {\n          stackRestore(sp);\n          if (typeof e !== \"number\" && e !== \"longjmp\")\n            throw e;\n          Module[\"setThrew\"](1, 0);\n        }\n      }\n      function invoke_iiiiij(index, a1, a2, a3, a4, a5, a6) {\n        var sp = stackSave();\n        try {\n          return Module[\"dynCall_iiiiij\"](index, a1, a2, a3, a4, a5, a6);\n        } catch (e) {\n          stackRestore(sp);\n          if (typeof e !== \"number\" && e !== \"longjmp\")\n            throw e;\n          Module[\"setThrew\"](1, 0);\n        }\n      }\n      function invoke_v(index) {\n        var sp = stackSave();\n        try {\n          Module[\"dynCall_v\"](index);\n        } catch (e) {\n          stackRestore(sp);\n          if (typeof e !== \"number\" && e !== \"longjmp\")\n            throw e;\n          Module[\"setThrew\"](1, 0);\n        }\n      }\n      function invoke_vi(index, a1) {\n        var sp = stackSave();\n        try {\n          Module[\"dynCall_vi\"](index, a1);\n        } catch (e) {\n          stackRestore(sp);\n          if (typeof e !== \"number\" && e !== \"longjmp\")\n            throw e;\n          Module[\"setThrew\"](1, 0);\n        }\n      }\n      function invoke_vii(index, a1, a2) {\n        var sp = stackSave();\n        try {\n          Module[\"dynCall_vii\"](index, a1, a2);\n        } catch (e) {\n          stackRestore(sp);\n          if (typeof e !== \"number\" && e !== \"longjmp\")\n            throw e;\n          Module[\"setThrew\"](1, 0);\n        }\n      }\n      function invoke_viii(index, a1, a2, a3) {\n        var sp = stackSave();\n        try {\n          Module[\"dynCall_viii\"](index, a1, a2, a3);\n        } catch (e) {\n          stackRestore(sp);\n          if (typeof e !== \"number\" && e !== \"longjmp\")\n            throw e;\n          Module[\"setThrew\"](1, 0);\n        }\n      }\n      function invoke_viiii(index, a1, a2, a3, a4) {\n        var sp = stackSave();\n        try {\n          Module[\"dynCall_viiii\"](index, a1, a2, a3, a4);\n        } catch (e) {\n          stackRestore(sp);\n          if (typeof e !== \"number\" && e !== \"longjmp\")\n            throw e;\n          Module[\"setThrew\"](1, 0);\n        }\n      }\n      function invoke_viiiii(index, a1, a2, a3, a4, a5) {\n        var sp = stackSave();\n        try {\n          Module[\"dynCall_viiiii\"](index, a1, a2, a3, a4, a5);\n        } catch (e) {\n          stackRestore(sp);\n          if (typeof e !== \"number\" && e !== \"longjmp\")\n            throw e;\n          Module[\"setThrew\"](1, 0);\n        }\n      }\n      function invoke_viiiiii(index, a1, a2, a3, a4, a5, a6) {\n        var sp = stackSave();\n        try {\n          Module[\"dynCall_viiiiii\"](index, a1, a2, a3, a4, a5, a6);\n        } catch (e) {\n          stackRestore(sp);\n          if (typeof e !== \"number\" && e !== \"longjmp\")\n            throw e;\n          Module[\"setThrew\"](1, 0);\n        }\n      }\n      function invoke_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {\n        var sp = stackSave();\n        try {\n          Module[\"dynCall_viiiiiii\"](index, a1, a2, a3, a4, a5, a6, a7);\n        } catch (e) {\n          stackRestore(sp);\n          if (typeof e !== \"number\" && e !== \"longjmp\")\n            throw e;\n          Module[\"setThrew\"](1, 0);\n        }\n      }\n      function invoke_viijii(index, a1, a2, a3, a4, a5, a6) {\n        var sp = stackSave();\n        try {\n          Module[\"dynCall_viijii\"](index, a1, a2, a3, a4, a5, a6);\n        } catch (e) {\n          stackRestore(sp);\n          if (typeof e !== \"number\" && e !== \"longjmp\")\n            throw e;\n          Module[\"setThrew\"](1, 0);\n        }\n      }\n      Module.asmGlobalArg = {};\n      Module.asmLibraryArg = {\n        abort,\n        assert,\n        enlargeMemory,\n        getTotalMemory,\n        abortOnCannotGrowMemory,\n        invoke_ii,\n        invoke_iii,\n        invoke_iiii,\n        invoke_iiiii,\n        invoke_iiiiid,\n        invoke_iiiiii,\n        invoke_iiiiiid,\n        invoke_iiiiiii,\n        invoke_iiiiiiii,\n        invoke_iiiiiiiii,\n        invoke_iiiiij,\n        invoke_v,\n        invoke_vi,\n        invoke_vii,\n        invoke_viii,\n        invoke_viiii,\n        invoke_viiiii,\n        invoke_viiiiii,\n        invoke_viiiiiii,\n        invoke_viijii,\n        ___cxa_allocate_exception,\n        ___cxa_find_matching_catch,\n        ___cxa_throw,\n        ___cxa_uncaught_exception,\n        ___gxx_personality_v0,\n        ___lock,\n        ___map_file,\n        ___resumeException,\n        ___setErrNo,\n        ___syscall140,\n        ___syscall145,\n        ___syscall146,\n        ___syscall54,\n        ___syscall6,\n        ___syscall91,\n        ___unlock,\n        __addDays,\n        __arraySum,\n        __isLeapYear,\n        _abort,\n        _emscripten_memcpy_big,\n        _getenv,\n        _llvm_pow_f64,\n        _llvm_stackrestore,\n        _llvm_stacksave,\n        _pthread_cond_wait,\n        _strftime,\n        _strftime_l,\n        DYNAMICTOP_PTR,\n        tempDoublePtr,\n        STACKTOP,\n        STACK_MAX\n      };\n      var asm = Module[\"asm\"](Module.asmGlobalArg, Module.asmLibraryArg, buffer);\n      Module[\"asm\"] = asm;\n      var _Decoder_delete = Module[\"_Decoder_delete\"] = function() {\n        return Module[\"asm\"][\"_Decoder_delete\"].apply(null, arguments);\n      };\n      var _Decoder_input = Module[\"_Decoder_input\"] = function() {\n        return Module[\"asm\"][\"_Decoder_input\"].apply(null, arguments);\n      };\n      var _Decoder_new = Module[\"_Decoder_new\"] = function() {\n        return Module[\"asm\"][\"_Decoder_new\"].apply(null, arguments);\n      };\n      var _Decoder_output = Module[\"_Decoder_output\"] = function() {\n        return Module[\"asm\"][\"_Decoder_output\"].apply(null, arguments);\n      };\n      var _Encoder_delete = Module[\"_Encoder_delete\"] = function() {\n        return Module[\"asm\"][\"_Encoder_delete\"].apply(null, arguments);\n      };\n      var _Encoder_input = Module[\"_Encoder_input\"] = function() {\n        return Module[\"asm\"][\"_Encoder_input\"].apply(null, arguments);\n      };\n      var _Encoder_new = Module[\"_Encoder_new\"] = function() {\n        return Module[\"asm\"][\"_Encoder_new\"].apply(null, arguments);\n      };\n      var _Encoder_output = Module[\"_Encoder_output\"] = function() {\n        return Module[\"asm\"][\"_Encoder_output\"].apply(null, arguments);\n      };\n      var _Int16Array_data = Module[\"_Int16Array_data\"] = function() {\n        return Module[\"asm\"][\"_Int16Array_data\"].apply(null, arguments);\n      };\n      var _Int16Array_delete = Module[\"_Int16Array_delete\"] = function() {\n        return Module[\"asm\"][\"_Int16Array_delete\"].apply(null, arguments);\n      };\n      var _Int16Array_new = Module[\"_Int16Array_new\"] = function() {\n        return Module[\"asm\"][\"_Int16Array_new\"].apply(null, arguments);\n      };\n      var _Int16Array_size = Module[\"_Int16Array_size\"] = function() {\n        return Module[\"asm\"][\"_Int16Array_size\"].apply(null, arguments);\n      };\n      var _String_data = Module[\"_String_data\"] = function() {\n        return Module[\"asm\"][\"_String_data\"].apply(null, arguments);\n      };\n      var _String_delete = Module[\"_String_delete\"] = function() {\n        return Module[\"asm\"][\"_String_delete\"].apply(null, arguments);\n      };\n      var _String_new = Module[\"_String_new\"] = function() {\n        return Module[\"asm\"][\"_String_new\"].apply(null, arguments);\n      };\n      var _String_size = Module[\"_String_size\"] = function() {\n        return Module[\"asm\"][\"_String_size\"].apply(null, arguments);\n      };\n      var __GLOBAL__I_000101 = Module[\"__GLOBAL__I_000101\"] = function() {\n        return Module[\"asm\"][\"__GLOBAL__I_000101\"].apply(null, arguments);\n      };\n      var __GLOBAL__sub_I_iostream_cpp = Module[\"__GLOBAL__sub_I_iostream_cpp\"] = function() {\n        return Module[\"asm\"][\"__GLOBAL__sub_I_iostream_cpp\"].apply(null, arguments);\n      };\n      var __ZSt18uncaught_exceptionv = Module[\"__ZSt18uncaught_exceptionv\"] = function() {\n        return Module[\"asm\"][\"__ZSt18uncaught_exceptionv\"].apply(null, arguments);\n      };\n      var ___cxa_can_catch = Module[\"___cxa_can_catch\"] = function() {\n        return Module[\"asm\"][\"___cxa_can_catch\"].apply(null, arguments);\n      };\n      var ___cxa_is_pointer_type = Module[\"___cxa_is_pointer_type\"] = function() {\n        return Module[\"asm\"][\"___cxa_is_pointer_type\"].apply(null, arguments);\n      };\n      var ___errno_location = Module[\"___errno_location\"] = function() {\n        return Module[\"asm\"][\"___errno_location\"].apply(null, arguments);\n      };\n      var _emscripten_replace_memory = Module[\"_emscripten_replace_memory\"] = function() {\n        return Module[\"asm\"][\"_emscripten_replace_memory\"].apply(null, arguments);\n      };\n      var _free = Module[\"_free\"] = function() {\n        return Module[\"asm\"][\"_free\"].apply(null, arguments);\n      };\n      var _llvm_bswap_i32 = Module[\"_llvm_bswap_i32\"] = function() {\n        return Module[\"asm\"][\"_llvm_bswap_i32\"].apply(null, arguments);\n      };\n      var _malloc = Module[\"_malloc\"] = function() {\n        return Module[\"asm\"][\"_malloc\"].apply(null, arguments);\n      };\n      var _memcpy = Module[\"_memcpy\"] = function() {\n        return Module[\"asm\"][\"_memcpy\"].apply(null, arguments);\n      };\n      var _memmove = Module[\"_memmove\"] = function() {\n        return Module[\"asm\"][\"_memmove\"].apply(null, arguments);\n      };\n      var _memset = Module[\"_memset\"] = function() {\n        return Module[\"asm\"][\"_memset\"].apply(null, arguments);\n      };\n      var _pthread_cond_broadcast = Module[\"_pthread_cond_broadcast\"] = function() {\n        return Module[\"asm\"][\"_pthread_cond_broadcast\"].apply(null, arguments);\n      };\n      var _pthread_mutex_lock = Module[\"_pthread_mutex_lock\"] = function() {\n        return Module[\"asm\"][\"_pthread_mutex_lock\"].apply(null, arguments);\n      };\n      var _pthread_mutex_unlock = Module[\"_pthread_mutex_unlock\"] = function() {\n        return Module[\"asm\"][\"_pthread_mutex_unlock\"].apply(null, arguments);\n      };\n      var _rintf = Module[\"_rintf\"] = function() {\n        return Module[\"asm\"][\"_rintf\"].apply(null, arguments);\n      };\n      var _sbrk = Module[\"_sbrk\"] = function() {\n        return Module[\"asm\"][\"_sbrk\"].apply(null, arguments);\n      };\n      var establishStackSpace = Module[\"establishStackSpace\"] = function() {\n        return Module[\"asm\"][\"establishStackSpace\"].apply(null, arguments);\n      };\n      var getTempRet0 = Module[\"getTempRet0\"] = function() {\n        return Module[\"asm\"][\"getTempRet0\"].apply(null, arguments);\n      };\n      var runPostSets = Module[\"runPostSets\"] = function() {\n        return Module[\"asm\"][\"runPostSets\"].apply(null, arguments);\n      };\n      var setTempRet0 = Module[\"setTempRet0\"] = function() {\n        return Module[\"asm\"][\"setTempRet0\"].apply(null, arguments);\n      };\n      var setThrew = Module[\"setThrew\"] = function() {\n        return Module[\"asm\"][\"setThrew\"].apply(null, arguments);\n      };\n      var stackAlloc = Module[\"stackAlloc\"] = function() {\n        return Module[\"asm\"][\"stackAlloc\"].apply(null, arguments);\n      };\n      var stackRestore = Module[\"stackRestore\"] = function() {\n        return Module[\"asm\"][\"stackRestore\"].apply(null, arguments);\n      };\n      var stackSave = Module[\"stackSave\"] = function() {\n        return Module[\"asm\"][\"stackSave\"].apply(null, arguments);\n      };\n      var dynCall_ii = Module[\"dynCall_ii\"] = function() {\n        return Module[\"asm\"][\"dynCall_ii\"].apply(null, arguments);\n      };\n      var dynCall_iii = Module[\"dynCall_iii\"] = function() {\n        return Module[\"asm\"][\"dynCall_iii\"].apply(null, arguments);\n      };\n      var dynCall_iiii = Module[\"dynCall_iiii\"] = function() {\n        return Module[\"asm\"][\"dynCall_iiii\"].apply(null, arguments);\n      };\n      var dynCall_iiiii = Module[\"dynCall_iiiii\"] = function() {\n        return Module[\"asm\"][\"dynCall_iiiii\"].apply(null, arguments);\n      };\n      var dynCall_iiiiid = Module[\"dynCall_iiiiid\"] = function() {\n        return Module[\"asm\"][\"dynCall_iiiiid\"].apply(null, arguments);\n      };\n      var dynCall_iiiiii = Module[\"dynCall_iiiiii\"] = function() {\n        return Module[\"asm\"][\"dynCall_iiiiii\"].apply(null, arguments);\n      };\n      var dynCall_iiiiiid = Module[\"dynCall_iiiiiid\"] = function() {\n        return Module[\"asm\"][\"dynCall_iiiiiid\"].apply(null, arguments);\n      };\n      var dynCall_iiiiiii = Module[\"dynCall_iiiiiii\"] = function() {\n        return Module[\"asm\"][\"dynCall_iiiiiii\"].apply(null, arguments);\n      };\n      var dynCall_iiiiiiii = Module[\"dynCall_iiiiiiii\"] = function() {\n        return Module[\"asm\"][\"dynCall_iiiiiiii\"].apply(null, arguments);\n      };\n      var dynCall_iiiiiiiii = Module[\"dynCall_iiiiiiiii\"] = function() {\n        return Module[\"asm\"][\"dynCall_iiiiiiiii\"].apply(null, arguments);\n      };\n      var dynCall_iiiiij = Module[\"dynCall_iiiiij\"] = function() {\n        return Module[\"asm\"][\"dynCall_iiiiij\"].apply(null, arguments);\n      };\n      var dynCall_v = Module[\"dynCall_v\"] = function() {\n        return Module[\"asm\"][\"dynCall_v\"].apply(null, arguments);\n      };\n      var dynCall_vi = Module[\"dynCall_vi\"] = function() {\n        return Module[\"asm\"][\"dynCall_vi\"].apply(null, arguments);\n      };\n      var dynCall_vii = Module[\"dynCall_vii\"] = function() {\n        return Module[\"asm\"][\"dynCall_vii\"].apply(null, arguments);\n      };\n      var dynCall_viii = Module[\"dynCall_viii\"] = function() {\n        return Module[\"asm\"][\"dynCall_viii\"].apply(null, arguments);\n      };\n      var dynCall_viiii = Module[\"dynCall_viiii\"] = function() {\n        return Module[\"asm\"][\"dynCall_viiii\"].apply(null, arguments);\n      };\n      var dynCall_viiiii = Module[\"dynCall_viiiii\"] = function() {\n        return Module[\"asm\"][\"dynCall_viiiii\"].apply(null, arguments);\n      };\n      var dynCall_viiiiii = Module[\"dynCall_viiiiii\"] = function() {\n        return Module[\"asm\"][\"dynCall_viiiiii\"].apply(null, arguments);\n      };\n      var dynCall_viiiiiii = Module[\"dynCall_viiiiiii\"] = function() {\n        return Module[\"asm\"][\"dynCall_viiiiiii\"].apply(null, arguments);\n      };\n      var dynCall_viijii = Module[\"dynCall_viijii\"] = function() {\n        return Module[\"asm\"][\"dynCall_viijii\"].apply(null, arguments);\n      };\n      Module[\"asm\"] = asm;\n      function ExitStatus(status) {\n        this.name = \"ExitStatus\";\n        this.message = \"Program terminated with exit(\" + status + \")\";\n        this.status = status;\n      }\n      ExitStatus.prototype = new Error();\n      ExitStatus.prototype.constructor = ExitStatus;\n      dependenciesFulfilled = function runCaller() {\n        if (!Module[\"calledRun\"])\n          run();\n        if (!Module[\"calledRun\"])\n          dependenciesFulfilled = runCaller;\n      };\n      function run(args) {\n        args = args || Module[\"arguments\"];\n        if (runDependencies > 0) {\n          return;\n        }\n        preRun();\n        if (runDependencies > 0)\n          return;\n        if (Module[\"calledRun\"])\n          return;\n        function doRun() {\n          if (Module[\"calledRun\"])\n            return;\n          Module[\"calledRun\"] = true;\n          if (ABORT)\n            return;\n          ensureInitRuntime();\n          preMain();\n          if (Module[\"onRuntimeInitialized\"])\n            Module[\"onRuntimeInitialized\"]();\n          postRun();\n        }\n        if (Module[\"setStatus\"]) {\n          Module[\"setStatus\"](\"Running...\");\n          setTimeout(function() {\n            setTimeout(function() {\n              Module[\"setStatus\"](\"\");\n            }, 1);\n            doRun();\n          }, 1);\n        } else {\n          doRun();\n        }\n      }\n      Module[\"run\"] = run;\n      function abort(what) {\n        if (Module[\"onAbort\"]) {\n          Module[\"onAbort\"](what);\n        }\n        if (what !== void 0) {\n          out(what);\n          err(what);\n          what = JSON.stringify(what);\n        } else {\n          what = \"\";\n        }\n        ABORT = true;\n        EXITSTATUS = 1;\n        throw \"abort(\" + what + \"). Build with -s ASSERTIONS=1 for more info.\";\n      }\n      Module[\"abort\"] = abort;\n      if (Module[\"preInit\"]) {\n        if (typeof Module[\"preInit\"] == \"function\")\n          Module[\"preInit\"] = [Module[\"preInit\"]];\n        while (Module[\"preInit\"].length > 0) {\n          Module[\"preInit\"].pop()();\n        }\n      }\n      Module[\"noExitRuntime\"] = true;\n      run();\n      function Encoder(channels, samplerate, bitrate, frame_size, voice_optimization) {\n        this.enc = Module._Encoder_new.apply(null, arguments);\n        this.out = Module._String_new();\n      }\n      Encoder.prototype.destroy = function() {\n        Module._Encoder_delete(this.enc);\n        Module._String_delete(this.out);\n      };\n      Encoder.prototype.input = function(samples) {\n        var ptr = Module._malloc(samples.length * samples.BYTES_PER_ELEMENT);\n        var pdata = new Uint8Array(Module.HEAPU8.buffer, ptr, samples.length * samples.BYTES_PER_ELEMENT);\n        pdata.set(new Uint8Array(samples.buffer, samples.byteOffset, samples.length * samples.BYTES_PER_ELEMENT));\n        Module._Encoder_input(this.enc, ptr, samples.length);\n        Module._free(ptr);\n      };\n      Encoder.prototype.output = function() {\n        var ok = Module._Encoder_output(this.enc, this.out);\n        if (ok)\n          return new Uint8Array(Module.HEAPU8.buffer, Module._String_data(this.out), Module._String_size(this.out));\n      };\n      function Decoder(channels, samplerate) {\n        this.dec = Module._Decoder_new.apply(null, arguments);\n        this.out = Module._Int16Array_new();\n      }\n      Decoder.prototype.destroy = function() {\n        Module._Decoder_delete(this.dec);\n        Module._Int16Array_delete(this.out);\n      };\n      Decoder.prototype.input = function(packet) {\n        var ptr = Module._malloc(packet.length * packet.BYTES_PER_ELEMENT);\n        var pdata = new Uint8Array(Module.HEAPU8.buffer, ptr, packet.length * packet.BYTES_PER_ELEMENT);\n        pdata.set(new Uint8Array(packet.buffer, packet.byteOffset, packet.length * packet.BYTES_PER_ELEMENT));\n        Module._Decoder_input(this.dec, ptr, packet.length);\n        Module._free(ptr);\n      };\n      Decoder.prototype.output = function() {\n        var ok = Module._Decoder_output(this.dec, this.out);\n        if (ok)\n          return new Int16Array(Module.HEAPU8.buffer, Module._Int16Array_data(this.out), Module._Int16Array_size(this.out));\n      };\n      Module.Encoder = Encoder;\n      Module.Decoder = Decoder;\n      module.exports = { Encoder, Decoder, Module };\n      if (Module[\"ENVIRONMENT\"] != \"NODE\")\n        libopus = Module;\n    }\n  });\n\n  // resampler.ts\n  var Resampler = class {\n    constructor(fromSampleRate, toSampleRate, channels) {\n      if (!fromSampleRate || !toSampleRate || !channels) {\n        throw new Error(\"Invalid settings specified for the resampler.\");\n      }\n      this.resampler = null;\n      this.fromSampleRate = fromSampleRate;\n      this.toSampleRate = toSampleRate;\n      this.channels = channels || 0;\n      this.initialize();\n    }\n    initialize() {\n      if (this.fromSampleRate === this.toSampleRate) {\n        this.resampler = (buffer) => {\n          return buffer;\n        };\n        this.ratioWeight = 1;\n      } else {\n        if (this.fromSampleRate < this.toSampleRate) {\n          this.linearInterpolation();\n          this.lastWeight = 1;\n        } else {\n          this.multiTap();\n          this.tailExists = false;\n          this.lastWeight = 0;\n        }\n        this.initializeBuffers();\n        this.ratioWeight = this.fromSampleRate / this.toSampleRate;\n      }\n    }\n    bufferSlice(sliceAmount) {\n      return this.outputBuffer.subarray(0, sliceAmount);\n    }\n    initializeBuffers() {\n      this.outputBufferSize = Math.ceil(\n        this.inputBufferSize * this.toSampleRate / this.fromSampleRate / this.channels * 1.0000004768371582\n      ) + this.channels + this.channels;\n      try {\n        this.outputBuffer = new Float32Array(this.outputBufferSize);\n        this.lastOutput = new Float32Array(this.channels);\n      } catch (error) {\n        this.outputBuffer = Float32Array.of();\n        this.lastOutput = Float32Array.of();\n      }\n    }\n    linearInterpolation() {\n      this.resampler = (buffer) => {\n        let bufferLength = buffer.length, channels = this.channels, outLength, ratioWeight, weight, firstWeight, secondWeight, sourceOffset, outputOffset, outputBuffer, channel;\n        if (bufferLength % channels !== 0) {\n          throw new Error(\"Buffer was of incorrect sample length.\");\n        }\n        if (bufferLength <= 0) {\n          return Float32Array.of();\n        }\n        outLength = this.outputBufferSize;\n        ratioWeight = this.ratioWeight;\n        weight = this.lastWeight;\n        firstWeight = 0;\n        secondWeight = 0;\n        sourceOffset = 0;\n        outputOffset = 0;\n        outputBuffer = this.outputBuffer;\n        for (; weight < 1; weight += ratioWeight) {\n          secondWeight = weight % 1;\n          firstWeight = 1 - secondWeight;\n          this.lastWeight = weight % 1;\n          for (channel = 0; channel < this.channels; ++channel) {\n            outputBuffer[outputOffset++] = this.lastOutput[channel] * firstWeight + buffer[channel] * secondWeight;\n          }\n        }\n        weight -= 1;\n        for (bufferLength -= channels, sourceOffset = Math.floor(weight) * channels; outputOffset < outLength && sourceOffset < bufferLength; ) {\n          secondWeight = weight % 1;\n          firstWeight = 1 - secondWeight;\n          for (channel = 0; channel < this.channels; ++channel) {\n            outputBuffer[outputOffset++] = buffer[sourceOffset + (channel > 0 ? channel : 0)] * firstWeight + buffer[sourceOffset + (channels + channel)] * secondWeight;\n          }\n          weight += ratioWeight;\n          sourceOffset = Math.floor(weight) * channels;\n        }\n        for (channel = 0; channel < channels; ++channel) {\n          this.lastOutput[channel] = buffer[sourceOffset++];\n        }\n        return this.bufferSlice(outputOffset);\n      };\n    }\n    multiTap() {\n      this.resampler = (buffer) => {\n        let bufferLength = buffer.length, outLength, output_variable_list, channels = this.channels, ratioWeight, weight, channel, actualPosition, amountToNext, alreadyProcessedTail, outputBuffer, outputOffset, currentPosition;\n        if (bufferLength % channels !== 0) {\n          throw new Error(\"Buffer was of incorrect sample length.\");\n        }\n        if (bufferLength <= 0) {\n          return Float32Array.of();\n        }\n        outLength = this.outputBufferSize;\n        output_variable_list = [];\n        ratioWeight = this.ratioWeight;\n        weight = 0;\n        actualPosition = 0;\n        amountToNext = 0;\n        alreadyProcessedTail = !this.tailExists;\n        this.tailExists = false;\n        outputBuffer = this.outputBuffer;\n        outputOffset = 0;\n        currentPosition = 0;\n        for (channel = 0; channel < channels; ++channel) {\n          output_variable_list[channel] = 0;\n        }\n        do {\n          if (alreadyProcessedTail) {\n            weight = ratioWeight;\n            for (channel = 0; channel < channels; ++channel) {\n              output_variable_list[channel] = 0;\n            }\n          } else {\n            weight = this.lastWeight;\n            for (channel = 0; channel < channels; ++channel) {\n              output_variable_list[channel] = this.lastOutput[channel];\n            }\n            alreadyProcessedTail = true;\n          }\n          while (weight > 0 && actualPosition < bufferLength) {\n            amountToNext = 1 + actualPosition - currentPosition;\n            if (weight >= amountToNext) {\n              for (channel = 0; channel < channels; ++channel) {\n                output_variable_list[channel] += buffer[actualPosition++] * amountToNext;\n              }\n              currentPosition = actualPosition;\n              weight -= amountToNext;\n            } else {\n              for (channel = 0; channel < channels; ++channel) {\n                output_variable_list[channel] += buffer[actualPosition + (channel > 0 ? channel : 0)] * weight;\n              }\n              currentPosition += weight;\n              weight = 0;\n              break;\n            }\n          }\n          if (weight === 0) {\n            for (channel = 0; channel < channels; ++channel) {\n              outputBuffer[outputOffset++] = output_variable_list[channel] / ratioWeight;\n            }\n          } else {\n            this.lastWeight = weight;\n            for (channel = 0; channel < channels; ++channel) {\n              this.lastOutput[channel] = output_variable_list[channel];\n            }\n            this.tailExists = true;\n            break;\n          }\n        } while (actualPosition < bufferLength && outputOffset < outLength);\n        return this.bufferSlice(outputOffset);\n      };\n    }\n    resample(buffer) {\n      this.inputBufferSize = buffer.length;\n      if (this.fromSampleRate === this.toSampleRate) {\n        this.ratioWeight = 1;\n      } else {\n        if (this.fromSampleRate < this.toSampleRate) {\n          this.lastWeight = 1;\n        } else {\n          this.tailExists = false;\n          this.lastWeight = 0;\n        }\n        this.initializeBuffers();\n        this.ratioWeight = this.fromSampleRate / this.toSampleRate;\n      }\n      return this.resampler(buffer);\n    }\n  };\n\n  // ../src/lib/voice/constants.ts\n  var OPUS_BITS_PER_SECOND = 24e3;\n  var OPUS_FRAME_SIZE_MS = 40;\n  var VOICE_CHAT_SAMPLE_RATE = 24e3;\n  var OPUS_SAMPLES_PER_FRAME = VOICE_CHAT_SAMPLE_RATE * OPUS_FRAME_SIZE_MS / 1e3;\n  var OUTPUT_NODE_BUFFER_SIZE = 2048;\n  var OUTPUT_NODE_BUFFER_DURATION = OUTPUT_NODE_BUFFER_SIZE * 1e3 / VOICE_CHAT_SAMPLE_RATE;\n\n  // worker.ts\n  var libopus2 = require_libopus_wasm();\n  function getSampleRate(e) {\n    return e.data.sampleRate ? e.data.sampleRate : 24e3;\n  }\n  var encoderWorklets = {};\n  var decoderWorklets = {};\n  function startWorklet(streamId, worklet, outputFunction, messageBuilder) {\n    worklet.working = true;\n    function doWork() {\n      worklet.lastWorkTime = Date.now();\n      let output = outputFunction(worklet);\n      if (output) {\n        if (output instanceof Uint8Array) {\n          output = Uint8Array.from(output);\n        } else {\n          output = Float32Array.from(output);\n        }\n        postMessage(messageBuilder(output, streamId), [output.buffer]);\n        setTimeout(doWork, 0);\n      } else {\n        worklet.working = false;\n      }\n    }\n    setTimeout(doWork, 0);\n  }\n  onmessage = function(e) {\n    if (e.data.topic === \"ENCODE\" /* ENCODE */) {\n      processEncodeMessage(e);\n    }\n    if (e.data.topic === \"DECODE\" /* DECODE */) {\n      processDecodeMessage(e);\n    }\n    if (e.data.topic === \"DESTROY_ENCODER\" /* DESTROY_DECODER */) {\n      const { streamId } = e.data;\n      destroyWorklet(decoderWorklets, streamId);\n    }\n    if (e.data.topic === \"DESTROY_ENCODER\" /* DESTROY_ENCODER */) {\n      const { streamId } = e.data;\n      destroyWorklet(encoderWorklets, streamId);\n    }\n  };\n  function processDecodeMessage(e) {\n    const sampleRate = getSampleRate(e);\n    const decoderWorklet = decoderWorklets[e.data.streamId] = decoderWorklets[e.data.streamId] || {\n      working: false,\n      decoder: new libopus2.Decoder(1, sampleRate),\n      lastWorkTime: Date.now(),\n      destroy: function() {\n        this.decoder.destroy();\n      }\n    };\n    decoderWorklet.decoder.input(e.data.encoded);\n    if (!decoderWorklet.working) {\n      startWorklet(\n        e.data.streamId,\n        decoderWorklet,\n        (worklet) => worklet.decoder.output(),\n        (output, streamId) => ({\n          topic: \"DECODE_OUTPUT\" /* DECODE */,\n          streamId,\n          samples: toFloat32Samples(output)\n        })\n      );\n    }\n  }\n  function processEncodeMessage(e) {\n    const sampleRate = getSampleRate(e);\n    const encoderWorklet = encoderWorklets[e.data.streamId] = encoderWorklets[e.data.streamId] || {\n      working: false,\n      encoder: new libopus2.Encoder(1, sampleRate, OPUS_BITS_PER_SECOND, OPUS_FRAME_SIZE_MS, true),\n      lastWorkTime: Date.now(),\n      destroy: function() {\n        this.encoder.destroy();\n      }\n    };\n    const samples = toInt16Samples(resampleIfNecessary(e.data.samples, e.data.sampleRate, e.data.inputSampleRate));\n    encoderWorklet.encoder.input(samples);\n    if (!encoderWorklet.working) {\n      startWorklet(\n        e.data.streamId,\n        encoderWorklet,\n        (worklet) => worklet.encoder.output(),\n        (output, streamId) => ({ topic: \"ENCODE_OUTPUT\" /* ENCODE */, streamId, encoded: output })\n      );\n    }\n  }\n  function resampleIfNecessary(floatSamples, targetSampleRate, inputSampleRate) {\n    if (inputSampleRate && inputSampleRate !== targetSampleRate) {\n      const resampler = new Resampler(inputSampleRate, targetSampleRate, 1);\n      return resampler.resample(floatSamples);\n    } else {\n      return floatSamples;\n    }\n  }\n  function toInt16Samples(floatSamples) {\n    return Int16Array.from(floatSamples, (floatSample) => {\n      let val = Math.floor(32767 * floatSample);\n      val = Math.min(32767, val);\n      val = Math.max(-32768, val);\n      return val;\n    });\n  }\n  function toFloat32Samples(intSamples) {\n    return Float32Array.from(intSamples, (intSample) => {\n      const floatValue = intSample >= 0 ? intSample / 32767 : intSample / 32768;\n      return Math.fround(floatValue);\n    });\n  }\n  function destroyWorklet(worklets, workletId) {\n    worklets[workletId]?.destroy();\n    delete worklets[workletId];\n  }\n})();\n//# sourceMappingURL=data:application/json;base64,\n"